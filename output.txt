==================================================
File: eslint.config.js
==================================================

import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  }
);


==================================================
File: index.html
==================================================

<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <link rel="icon" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="theme-color" content="#2563EB" /> <!-- Color azul de Tailwind blue-600 -->
   
  </head>
  <body>
    <div id="root">
      <!-- Pantalla de carga inicial -->
    </div>
    
    <noscript>
      <div style="padding: 20px; text-align: center; font-family: sans-serif;">
        <h2>Sublitex - Sistema de Gestión</h2>
      
      </div>
    </noscript>
    
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

==================================================
File: output.txt
==================================================

==================================================
File: App.tsx
==================================================

import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';

// Import components and layout
import AppLayout from './components/layout/AppLayout';

// Import pages
import ClientPage from './pages/ClientPage';
import ProjectPage from './pages/ProjectPage';
import BudgetPage from './pages/BudgetPage';
import BudgetTitlePage from './pages/BudgetTitlePage';
import BudgetSubtitlePage from './pages/BudgetSubtitlePage';
import BudgetItemPage from './pages/BudgetItemPage';
import BudgetMeasurementPage from './pages/BudgetMeasurementPage';
import ResourceFamilyPage from './pages/ResourceFamilyPage';
import ResourcePage from './pages/ResourcePage';
import PriceCardPage from './pages/PriceCardPage';
import UserPage from './pages/UserPage';
import BudgetAssignmentPage from './pages/BudgetAssignmentPage';
import GeneralExpensePage from './pages/GeneralExpensePage';
import ConfigurationPage from './pages/ConfigurationPage';

// Home component
const Home: React.FC = () => {
  return (
    <div className="bg-white dark:bg-secondary-800 shadow overflow-hidden sm:rounded-lg">
      <div className="px-4 py-5 sm:px-6">
        <h2 className="text-lg leading-6 font-medium text-secondary-900 dark:text-white">Bienvenido a la aplicación CRUD</h2>
        <p className="mt-1 max-w-2xl text-sm text-secondary-500 dark:text-secondary-300">
          Selecciona una entidad del menú lateral para comenzar.
        </p>
      </div>
      <div className="border-t border-secondary-200 dark:border-secondary-700">
        <dl>
          <div className="bg-secondary-50 dark:bg-secondary-800 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
            <dt className="text-sm font-medium text-secondary-500 dark:text-secondary-300">Entidades disponibles</dt>
            <dd className="mt-1 text-sm text-secondary-900 dark:text-secondary-100 sm:mt-0 sm:col-span-2">
              <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
                {[
                  { name: 'Clients', path: '/clients' },
                  { name: 'Projects', path: '/projects' },
                  { name: 'Budgets', path: '/budgets' },
                  { name: 'Budget Titles', path: '/budgetTitles' },
                  { name: 'Budget Subtitles', path: '/budgetSubtitles' },
                  { name: 'Budget Items', path: '/budgetItems' },
                  { name: 'Budget Measurements', path: '/budgetMeasurements' },
                  { name: 'Resource Families', path: '/resourceFamilys' },
                  { name: 'Resources', path: '/resources' },
                  { name: 'Price Cards', path: '/priceCards' },
                  { name: 'Users', path: '/users' },
                  { name: 'Budget Assignments', path: '/budgetAssignments' },
                  { name: 'General Expenses', path: '/generalExpenses' },
                  { name: 'Configurations', path: '/configurations' },
                ].map((item) => (
                  <div key={item.name} className="flex items-center p-3 rounded-md bg-white dark:bg-secondary-700 shadow-sm hover:shadow-md transition-shadow">
                    <a href={item.path} className="w-full text-primary-600 dark:text-primary-400 hover:text-primary-800 dark:hover:text-primary-300 font-medium">
                      {item.name}
                    </a>
                  </div>
                ))}
              </div>
            </dd>
          </div>
        </dl>
      </div>
    </div>
  );
};

const App: React.FC = () => {
  return (
    <Router>
      <AppLayout>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/clients/*" element={<ClientPage />} />
          <Route path="/projects/*" element={<ProjectPage />} />
          <Route path="/budgets/*" element={<BudgetPage />} />
          <Route path="/budgetTitles/*" element={<BudgetTitlePage />} />
          <Route path="/budgetSubtitles/*" element={<BudgetSubtitlePage />} />
          <Route path="/budgetItems/*" element={<BudgetItemPage />} />
          <Route path="/budgetMeasurements/*" element={<BudgetMeasurementPage />} />
          <Route path="/resourceFamilys/*" element={<ResourceFamilyPage />} />
          <Route path="/resources/*" element={<ResourcePage />} />
          <Route path="/priceCards/*" element={<PriceCardPage />} />
          <Route path="/users/*" element={<UserPage />} />
          <Route path="/budgetAssignments/*" element={<BudgetAssignmentPage />} />
          <Route path="/generalExpenses/*" element={<GeneralExpensePage />} />
          <Route path="/configurations/*" element={<ConfigurationPage />} />
        </Routes>
      </AppLayout>
    </Router>
  );
};

export default App;

==================================================
File: components/Sidebar.tsx
==================================================

import React, { useState, useEffect } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { 
  UserIcon, UsersIcon, FolderIcon, CubeIcon, 
  BookOpenIcon, WrenchScrewdriverIcon, CogIcon, 
  Squares2X2Icon, ClipboardDocumentListIcon, CurrencyDollarIcon,
  BuildingOfficeIcon, TagIcon, XMarkIcon, Bars3Icon 
} from '@heroicons/react/24/outline';

interface NavItem {
  name: string;
  path: string;
  icon: React.ReactNode;
}

const Sidebar: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const location = useLocation();
  
  // Close sidebar when clicking outside on mobile
  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth >= 1024) {
        setIsOpen(true);
      } else {
        setIsOpen(false);
      }
    };

    // Set initial state
    handleResize();
    
    // Add event listener
    window.addEventListener('resize', handleResize);
    
    // Cleanup
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  // Close sidebar when route changes on mobile
  useEffect(() => {
    if (window.innerWidth < 1024) {
      setIsOpen(false);
    }
  }, [location.pathname]);

  const navItems: NavItem[] = [
    { name: 'Dashboard', path: '/', icon: <Squares2X2Icon className="w-6 h-6" /> },
    { name: 'Clients', path: '/clients', icon: <BuildingOfficeIcon className="w-6 h-6" /> },
    { name: 'Projects', path: '/projects', icon: <FolderIcon className="w-6 h-6" /> },
    { name: 'Budgets', path: '/budgets', icon: <ClipboardDocumentListIcon className="w-6 h-6" /> },
    { name: 'Budget Titles', path: '/budgetTitles', icon: <BookOpenIcon className="w-6 h-6" /> },
    { name: 'Budget Subtitles', path: '/budgetSubtitles', icon: <BookOpenIcon className="w-6 h-6" /> },
    { name: 'Budget Items', path: '/budgetItems', icon: <ClipboardDocumentListIcon className="w-6 h-6" /> },
    { name: 'Budget Measurements', path: '/budgetMeasurements', icon: <ClipboardDocumentListIcon className="w-6 h-6" /> },
    { name: 'Resource Families', path: '/resourceFamilys', icon: <CubeIcon className="w-6 h-6" /> },
    { name: 'Resources', path: '/resources', icon: <WrenchScrewdriverIcon className="w-6 h-6" /> },
    { name: 'Price Cards', path: '/priceCards', icon: <CurrencyDollarIcon className="w-6 h-6" /> },
    { name: 'Users', path: '/users', icon: <UserIcon className="w-6 h-6" /> },
    { name: 'Budget Assignments', path: '/budgetAssignments', icon: <UsersIcon className="w-6 h-6" /> },
    { name: 'General Expenses', path: '/generalExpenses', icon: <TagIcon className="w-6 h-6" /> },
    { name: 'Configurations', path: '/configurations', icon: <CogIcon className="w-6 h-6" /> },
  ];

  return (
    <>
      {/* Mobile menu button */}
      <div className="lg:hidden fixed top-0 left-0 z-40 m-4">
        <button
          onClick={() => setIsOpen(!isOpen)}
          className="bg-primary-600 text-white p-2 rounded-md focus:outline-none"
        >
          <Bars3Icon className="w-6 h-6" />
        </button>
      </div>

      {/* Backdrop for mobile */}
      {isOpen && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-30 lg:hidden"
          onClick={() => setIsOpen(false)}
        />
      )}

      {/* Sidebar */}
      <div 
        className={`fixed inset-y-0 left-0 z-40 w-64 bg-white dark:bg-secondary-900 shadow-lg transform transition-transform duration-300 ease-in-out ${
          isOpen ? 'translate-x-0' : '-translate-x-full'
        } lg:translate-x-0 overflow-y-auto`}
      >
        <div className="flex items-center justify-between h-16 px-6 border-b border-secondary-200 dark:border-secondary-700">
          <h1 className="text-xl font-bold text-primary-600 dark:text-white">CRUD App</h1>
          <button
            onClick={() => setIsOpen(false)}
            className="text-secondary-500 hover:text-secondary-700 lg:hidden"
          >
            <XMarkIcon className="w-6 h-6" />
          </button>
        </div>

        <nav className="mt-4 px-2">
          <div className="space-y-1">
            {navItems.map((item) => {
              const isActive = location.pathname === item.path || 
                               (item.path !== '/' && location.pathname.startsWith(item.path));
              
              return (
                <Link
                  key={item.name}
                  to={item.path}
                  className={`group flex items-center px-2 py-2 text-sm font-medium rounded-md transition-colors ${
                    isActive
                      ? 'bg-primary-100 text-primary-700 dark:bg-primary-900 dark:text-primary-100'
                      : 'text-secondary-600 hover:bg-secondary-100 dark:text-secondary-300 dark:hover:bg-secondary-800'
                  }`}
                >
                  <div className={`mr-3 ${isActive ? 'text-primary-600 dark:text-primary-400' : 'text-secondary-400 group-hover:text-secondary-600 dark:text-secondary-500 dark:group-hover:text-secondary-300'}`}>
                    {item.icon}
                  </div>
                  {item.name}
                </Link>
              );
            })}
          </div>
        </nav>
      </div>
    </>
  );
};

export default Sidebar;

==================================================
File: components/forms/BudgetAssignmentForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { BudgetAssignment, BudgetAssignmentInput, BudgetAssignmentService } from '../../services/budgetAssignment.service';

interface BudgetAssignmentFormProps {
  id?: string;
  onSuccess?: () => void;
}

const BudgetAssignmentForm: React.FC<BudgetAssignmentFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<BudgetAssignmentInput>({
    assignment_id: 0,
    budgetId: 0,
    userId: 0,
    roleInBudget: '',
    createdAt: '',
    updatedAt: '',
    budget: '',
    user: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await BudgetAssignmentService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.budgetId) {
        setError('El campo budgetId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.userId) {
        setError('El campo userId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.roleInBudget) {
        setError('El campo roleInBudget es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.budget) {
        setError('El campo budget es requerido');
        setLoading(false);
        return;
      }
      if (!formData.user) {
        setError('El campo user es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await BudgetAssignmentService.update(id, formData);
      } else {
        // Crear nuevo registro
        await BudgetAssignmentService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          assignment_id: 0,
          budgetId: 0,
          userId: 0,
          roleInBudget: '',
          createdAt: '',
          updatedAt: '',
          budget: '',
          user: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} BudgetAssignment</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="assignment_id" className="block text-sm font-medium text-gray-700">Assignment_id</label>
          <input
            type="number"
            id="assignment_id"
            name="assignment_id"
            value={formData.assignment_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="budgetId" className="block text-sm font-medium text-gray-700">BudgetId</label>
          <input
            type="number"
            id="budgetId"
            name="budgetId"
            value={formData.budgetId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="userId" className="block text-sm font-medium text-gray-700">UserId</label>
          <input
            type="number"
            id="userId"
            name="userId"
            value={formData.userId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="roleInBudget" className="block text-sm font-medium text-gray-700">RoleInBudget</label>
          <input
            type="text"
            id="roleInBudget"
            name="roleInBudget"
            value={formData.roleInBudget || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="budget" className="block text-sm font-medium text-gray-700">Budget</label>
          <input
            type="text"
            id="budget"
            name="budget"
            value={formData.budget || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="user" className="block text-sm font-medium text-gray-700">User</label>
          <input
            type="text"
            id="user"
            name="user"
            value={formData.user || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default BudgetAssignmentForm;


==================================================
File: components/forms/BudgetForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { Budget, BudgetInput, BudgetService } from '../../services/budget.service';

interface BudgetFormProps {
  id?: string;
  onSuccess?: () => void;
}

const BudgetForm: React.FC<BudgetFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<BudgetInput>({
    budget_id: 0,
    projectId: 0,
    code: '',
    obraName: '',
    owner: '',
    baseDate: '',
    status: '',
    responsibleUserId: 0,
    createdAt: '',
    updatedAt: '',
    project: '',
    responsibleUser: '',
    titles: '',
    items: '',
    assignments: '',
    generalExpenses: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await BudgetService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.baseDate instanceof Date) {
        formattedData.baseDate = new Date(formattedData.baseDate).toISOString().substring(0, 10);
      }
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.projectId) {
        setError('El campo projectId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.code) {
        setError('El campo code es requerido');
        setLoading(false);
        return;
      }
      if (!formData.obraName) {
        setError('El campo obraName es requerido');
        setLoading(false);
        return;
      }
      if (!formData.owner) {
        setError('El campo owner es requerido');
        setLoading(false);
        return;
      }
      if (!formData.baseDate) {
        setError('El campo baseDate es requerido');
        setLoading(false);
        return;
      }
      if (!formData.status) {
        setError('El campo status es requerido');
        setLoading(false);
        return;
      }
      if (!formData.responsibleUserId) {
        setError('El campo responsibleUserId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.project) {
        setError('El campo project es requerido');
        setLoading(false);
        return;
      }
      if (!formData.responsibleUser) {
        setError('El campo responsibleUser es requerido');
        setLoading(false);
        return;
      }
      if (!formData.titles) {
        setError('El campo titles es requerido');
        setLoading(false);
        return;
      }
      if (!formData.items) {
        setError('El campo items es requerido');
        setLoading(false);
        return;
      }
      if (!formData.assignments) {
        setError('El campo assignments es requerido');
        setLoading(false);
        return;
      }
      if (!formData.generalExpenses) {
        setError('El campo generalExpenses es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await BudgetService.update(id, formData);
      } else {
        // Crear nuevo registro
        await BudgetService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          budget_id: 0,
          projectId: 0,
          code: '',
          obraName: '',
          owner: '',
          baseDate: '',
          status: '',
          responsibleUserId: 0,
          createdAt: '',
          updatedAt: '',
          project: '',
          responsibleUser: '',
          titles: '',
          items: '',
          assignments: '',
          generalExpenses: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} Budget</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="budget_id" className="block text-sm font-medium text-gray-700">Budget_id</label>
          <input
            type="number"
            id="budget_id"
            name="budget_id"
            value={formData.budget_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="projectId" className="block text-sm font-medium text-gray-700">ProjectId</label>
          <input
            type="number"
            id="projectId"
            name="projectId"
            value={formData.projectId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="code" className="block text-sm font-medium text-gray-700">Code</label>
          <input
            type="text"
            id="code"
            name="code"
            value={formData.code || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="obraName" className="block text-sm font-medium text-gray-700">ObraName</label>
          <input
            type="text"
            id="obraName"
            name="obraName"
            value={formData.obraName || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="owner" className="block text-sm font-medium text-gray-700">Owner</label>
          <input
            type="text"
            id="owner"
            name="owner"
            value={formData.owner || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="baseDate" className="block text-sm font-medium text-gray-700">BaseDate</label>
          <input
            type="date"
            id="baseDate"
            name="baseDate"
            value={formData.baseDate || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="status" className="block text-sm font-medium text-gray-700">Status</label>
          <input
            type="text"
            id="status"
            name="status"
            value={formData.status || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="responsibleUserId" className="block text-sm font-medium text-gray-700">ResponsibleUserId</label>
          <input
            type="number"
            id="responsibleUserId"
            name="responsibleUserId"
            value={formData.responsibleUserId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="project" className="block text-sm font-medium text-gray-700">Project</label>
          <input
            type="text"
            id="project"
            name="project"
            value={formData.project || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="responsibleUser" className="block text-sm font-medium text-gray-700">ResponsibleUser</label>
          <input
            type="text"
            id="responsibleUser"
            name="responsibleUser"
            value={formData.responsibleUser || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="titles" className="block text-sm font-medium text-gray-700">Titles</label>
          <input
            type="text"
            id="titles"
            name="titles"
            value={formData.titles || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="items" className="block text-sm font-medium text-gray-700">Items</label>
          <input
            type="text"
            id="items"
            name="items"
            value={formData.items || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="assignments" className="block text-sm font-medium text-gray-700">Assignments</label>
          <input
            type="text"
            id="assignments"
            name="assignments"
            value={formData.assignments || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="generalExpenses" className="block text-sm font-medium text-gray-700">GeneralExpenses</label>
          <input
            type="text"
            id="generalExpenses"
            name="generalExpenses"
            value={formData.generalExpenses || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default BudgetForm;


==================================================
File: components/forms/BudgetItemForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { BudgetItem, BudgetItemInput, BudgetItemService } from '../../services/budgetItem.service';

interface BudgetItemFormProps {
  id?: string;
  onSuccess?: () => void;
}

const BudgetItemForm: React.FC<BudgetItemFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<BudgetItemInput>({
    item_id: 0,
    budgetId: 0,
    titleId: 0,
    subtitleId: 0,
    code: '',
    description: '',
    quantity: '',
    unit: '',
    unitPrice: '',
    metradoTotal: '',
    formula: '',
    materialsCost: '',
    laborCost: '',
    equipmentCost: '',
    incidencePercentage: '',
    createdAt: '',
    updatedAt: '',
    budget: '',
    title: '',
    subtitle: '',
    measurements: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await BudgetItemService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.budgetId) {
        setError('El campo budgetId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.titleId) {
        setError('El campo titleId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.code) {
        setError('El campo code es requerido');
        setLoading(false);
        return;
      }
      if (!formData.unit) {
        setError('El campo unit es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.budget) {
        setError('El campo budget es requerido');
        setLoading(false);
        return;
      }
      if (!formData.title) {
        setError('El campo title es requerido');
        setLoading(false);
        return;
      }
      if (!formData.measurements) {
        setError('El campo measurements es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await BudgetItemService.update(id, formData);
      } else {
        // Crear nuevo registro
        await BudgetItemService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          item_id: 0,
          budgetId: 0,
          titleId: 0,
          subtitleId: 0,
          code: '',
          description: '',
          quantity: '',
          unit: '',
          unitPrice: '',
          metradoTotal: '',
          formula: '',
          materialsCost: '',
          laborCost: '',
          equipmentCost: '',
          incidencePercentage: '',
          createdAt: '',
          updatedAt: '',
          budget: '',
          title: '',
          subtitle: '',
          measurements: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} BudgetItem</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="item_id" className="block text-sm font-medium text-gray-700">Item_id</label>
          <input
            type="number"
            id="item_id"
            name="item_id"
            value={formData.item_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="budgetId" className="block text-sm font-medium text-gray-700">BudgetId</label>
          <input
            type="number"
            id="budgetId"
            name="budgetId"
            value={formData.budgetId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="titleId" className="block text-sm font-medium text-gray-700">TitleId</label>
          <input
            type="number"
            id="titleId"
            name="titleId"
            value={formData.titleId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="subtitleId" className="block text-sm font-medium text-gray-700">SubtitleId</label>
          <input
            type="number"
            id="subtitleId"
            name="subtitleId"
            value={formData.subtitleId ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="code" className="block text-sm font-medium text-gray-700">Code</label>
          <input
            type="text"
            id="code"
            name="code"
            value={formData.code || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="description" className="block text-sm font-medium text-gray-700">Description</label>
          <input
            type="text"
            id="description"
            name="description"
            value={formData.description || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="quantity" className="block text-sm font-medium text-gray-700">Quantity</label>
          <input
            type="text"
            id="quantity"
            name="quantity"
            value={formData.quantity || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="unit" className="block text-sm font-medium text-gray-700">Unit</label>
          <input
            type="text"
            id="unit"
            name="unit"
            value={formData.unit || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="unitPrice" className="block text-sm font-medium text-gray-700">UnitPrice</label>
          <input
            type="text"
            id="unitPrice"
            name="unitPrice"
            value={formData.unitPrice || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="metradoTotal" className="block text-sm font-medium text-gray-700">MetradoTotal</label>
          <input
            type="text"
            id="metradoTotal"
            name="metradoTotal"
            value={formData.metradoTotal || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="formula" className="block text-sm font-medium text-gray-700">Formula</label>
          <input
            type="text"
            id="formula"
            name="formula"
            value={formData.formula || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="materialsCost" className="block text-sm font-medium text-gray-700">MaterialsCost</label>
          <input
            type="text"
            id="materialsCost"
            name="materialsCost"
            value={formData.materialsCost || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="laborCost" className="block text-sm font-medium text-gray-700">LaborCost</label>
          <input
            type="text"
            id="laborCost"
            name="laborCost"
            value={formData.laborCost || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="equipmentCost" className="block text-sm font-medium text-gray-700">EquipmentCost</label>
          <input
            type="text"
            id="equipmentCost"
            name="equipmentCost"
            value={formData.equipmentCost || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="incidencePercentage" className="block text-sm font-medium text-gray-700">IncidencePercentage</label>
          <input
            type="text"
            id="incidencePercentage"
            name="incidencePercentage"
            value={formData.incidencePercentage || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="budget" className="block text-sm font-medium text-gray-700">Budget</label>
          <input
            type="text"
            id="budget"
            name="budget"
            value={formData.budget || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="title" className="block text-sm font-medium text-gray-700">Title</label>
          <input
            type="text"
            id="title"
            name="title"
            value={formData.title || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="subtitle" className="block text-sm font-medium text-gray-700">Subtitle</label>
          <input
            type="text"
            id="subtitle"
            name="subtitle"
            value={formData.subtitle || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="measurements" className="block text-sm font-medium text-gray-700">Measurements</label>
          <input
            type="text"
            id="measurements"
            name="measurements"
            value={formData.measurements || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default BudgetItemForm;


==================================================
File: components/forms/BudgetMeasurementForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { BudgetMeasurement, BudgetMeasurementInput, BudgetMeasurementService } from '../../services/budgetMeasurement.service';

interface BudgetMeasurementFormProps {
  id?: string;
  onSuccess?: () => void;
}

const BudgetMeasurementForm: React.FC<BudgetMeasurementFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<BudgetMeasurementInput>({
    measurement_id: 0,
    itemId: 0,
    productionUnit: '',
    quantity: '',
    metradoValue: '',
    createdAt: '',
    updatedAt: '',
    item: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await BudgetMeasurementService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.itemId) {
        setError('El campo itemId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.productionUnit) {
        setError('El campo productionUnit es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.item) {
        setError('El campo item es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await BudgetMeasurementService.update(id, formData);
      } else {
        // Crear nuevo registro
        await BudgetMeasurementService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          measurement_id: 0,
          itemId: 0,
          productionUnit: '',
          quantity: '',
          metradoValue: '',
          createdAt: '',
          updatedAt: '',
          item: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} BudgetMeasurement</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="measurement_id" className="block text-sm font-medium text-gray-700">Measurement_id</label>
          <input
            type="number"
            id="measurement_id"
            name="measurement_id"
            value={formData.measurement_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="itemId" className="block text-sm font-medium text-gray-700">ItemId</label>
          <input
            type="number"
            id="itemId"
            name="itemId"
            value={formData.itemId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="productionUnit" className="block text-sm font-medium text-gray-700">ProductionUnit</label>
          <input
            type="text"
            id="productionUnit"
            name="productionUnit"
            value={formData.productionUnit || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="quantity" className="block text-sm font-medium text-gray-700">Quantity</label>
          <input
            type="text"
            id="quantity"
            name="quantity"
            value={formData.quantity || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="metradoValue" className="block text-sm font-medium text-gray-700">MetradoValue</label>
          <input
            type="text"
            id="metradoValue"
            name="metradoValue"
            value={formData.metradoValue || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="item" className="block text-sm font-medium text-gray-700">Item</label>
          <input
            type="text"
            id="item"
            name="item"
            value={formData.item || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default BudgetMeasurementForm;


==================================================
File: components/forms/BudgetSubtitleForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { BudgetSubtitle, BudgetSubtitleInput, BudgetSubtitleService } from '../../services/budgetSubtitle.service';

interface BudgetSubtitleFormProps {
  id?: string;
  onSuccess?: () => void;
}

const BudgetSubtitleForm: React.FC<BudgetSubtitleFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<BudgetSubtitleInput>({
    subtitle_id: 0,
    titleId: 0,
    name: '',
    orderIndex: 0,
    createdAt: '',
    updatedAt: '',
    title: '',
    items: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await BudgetSubtitleService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.titleId) {
        setError('El campo titleId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.name) {
        setError('El campo name es requerido');
        setLoading(false);
        return;
      }
      if (!formData.orderIndex) {
        setError('El campo orderIndex es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.title) {
        setError('El campo title es requerido');
        setLoading(false);
        return;
      }
      if (!formData.items) {
        setError('El campo items es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await BudgetSubtitleService.update(id, formData);
      } else {
        // Crear nuevo registro
        await BudgetSubtitleService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          subtitle_id: 0,
          titleId: 0,
          name: '',
          orderIndex: 0,
          createdAt: '',
          updatedAt: '',
          title: '',
          items: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} BudgetSubtitle</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="subtitle_id" className="block text-sm font-medium text-gray-700">Subtitle_id</label>
          <input
            type="number"
            id="subtitle_id"
            name="subtitle_id"
            value={formData.subtitle_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="titleId" className="block text-sm font-medium text-gray-700">TitleId</label>
          <input
            type="number"
            id="titleId"
            name="titleId"
            value={formData.titleId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="name" className="block text-sm font-medium text-gray-700">Name</label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="orderIndex" className="block text-sm font-medium text-gray-700">OrderIndex</label>
          <input
            type="number"
            id="orderIndex"
            name="orderIndex"
            value={formData.orderIndex ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="title" className="block text-sm font-medium text-gray-700">Title</label>
          <input
            type="text"
            id="title"
            name="title"
            value={formData.title || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="items" className="block text-sm font-medium text-gray-700">Items</label>
          <input
            type="text"
            id="items"
            name="items"
            value={formData.items || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default BudgetSubtitleForm;


==================================================
File: components/forms/BudgetTitleForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { BudgetTitle, BudgetTitleInput, BudgetTitleService } from '../../services/budgetTitle.service';

interface BudgetTitleFormProps {
  id?: string;
  onSuccess?: () => void;
}

const BudgetTitleForm: React.FC<BudgetTitleFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<BudgetTitleInput>({
    title_id: 0,
    budgetId: 0,
    name: '',
    orderIndex: 0,
    createdAt: '',
    updatedAt: '',
    budget: '',
    subtitles: '',
    items: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await BudgetTitleService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.budgetId) {
        setError('El campo budgetId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.name) {
        setError('El campo name es requerido');
        setLoading(false);
        return;
      }
      if (!formData.orderIndex) {
        setError('El campo orderIndex es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.budget) {
        setError('El campo budget es requerido');
        setLoading(false);
        return;
      }
      if (!formData.subtitles) {
        setError('El campo subtitles es requerido');
        setLoading(false);
        return;
      }
      if (!formData.items) {
        setError('El campo items es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await BudgetTitleService.update(id, formData);
      } else {
        // Crear nuevo registro
        await BudgetTitleService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          title_id: 0,
          budgetId: 0,
          name: '',
          orderIndex: 0,
          createdAt: '',
          updatedAt: '',
          budget: '',
          subtitles: '',
          items: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} BudgetTitle</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="title_id" className="block text-sm font-medium text-gray-700">Title_id</label>
          <input
            type="number"
            id="title_id"
            name="title_id"
            value={formData.title_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="budgetId" className="block text-sm font-medium text-gray-700">BudgetId</label>
          <input
            type="number"
            id="budgetId"
            name="budgetId"
            value={formData.budgetId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="name" className="block text-sm font-medium text-gray-700">Name</label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="orderIndex" className="block text-sm font-medium text-gray-700">OrderIndex</label>
          <input
            type="number"
            id="orderIndex"
            name="orderIndex"
            value={formData.orderIndex ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="budget" className="block text-sm font-medium text-gray-700">Budget</label>
          <input
            type="text"
            id="budget"
            name="budget"
            value={formData.budget || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="subtitles" className="block text-sm font-medium text-gray-700">Subtitles</label>
          <input
            type="text"
            id="subtitles"
            name="subtitles"
            value={formData.subtitles || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="items" className="block text-sm font-medium text-gray-700">Items</label>
          <input
            type="text"
            id="items"
            name="items"
            value={formData.items || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default BudgetTitleForm;


==================================================
File: components/forms/ClientForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { Client, ClientInput, ClientService } from '../../services/client.service';

interface ClientFormProps {
  id?: string;
  onSuccess?: () => void;
}

const ClientForm: React.FC<ClientFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<ClientInput>({
    client_id: 0,
    name: '',
    logoUrl: '',
    colorScheme: '',
    createdAt: '',
    updatedAt: '',
    projects: '',
    users: '',
    configurations: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await ClientService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.name) {
        setError('El campo name es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.projects) {
        setError('El campo projects es requerido');
        setLoading(false);
        return;
      }
      if (!formData.users) {
        setError('El campo users es requerido');
        setLoading(false);
        return;
      }
      if (!formData.configurations) {
        setError('El campo configurations es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await ClientService.update(id, formData);
      } else {
        // Crear nuevo registro
        await ClientService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          client_id: 0,
          name: '',
          logoUrl: '',
          colorScheme: '',
          createdAt: '',
          updatedAt: '',
          projects: '',
          users: '',
          configurations: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} Client</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="client_id" className="block text-sm font-medium text-gray-700">Client_id</label>
          <input
            type="number"
            id="client_id"
            name="client_id"
            value={formData.client_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="name" className="block text-sm font-medium text-gray-700">Name</label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="logoUrl" className="block text-sm font-medium text-gray-700">LogoUrl</label>
          <input
            type="text"
            id="logoUrl"
            name="logoUrl"
            value={formData.logoUrl || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="colorScheme" className="block text-sm font-medium text-gray-700">ColorScheme</label>
          <input
            type="text"
            id="colorScheme"
            name="colorScheme"
            value={formData.colorScheme || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="projects" className="block text-sm font-medium text-gray-700">Projects</label>
          <input
            type="text"
            id="projects"
            name="projects"
            value={formData.projects || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="users" className="block text-sm font-medium text-gray-700">Users</label>
          <input
            type="text"
            id="users"
            name="users"
            value={formData.users || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="configurations" className="block text-sm font-medium text-gray-700">Configurations</label>
          <input
            type="text"
            id="configurations"
            name="configurations"
            value={formData.configurations || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default ClientForm;


==================================================
File: components/forms/ConfigurationForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { Configuration, ConfigurationInput, ConfigurationService } from '../../services/configuration.service';

interface ConfigurationFormProps {
  id?: string;
  onSuccess?: () => void;
}

const ConfigurationForm: React.FC<ConfigurationFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<ConfigurationInput>({
    configuration_id: 0,
    clientId: 0,
    settingKey: '',
    settingValue: '',
    createdAt: '',
    updatedAt: '',
    client: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await ConfigurationService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.clientId) {
        setError('El campo clientId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.settingKey) {
        setError('El campo settingKey es requerido');
        setLoading(false);
        return;
      }
      if (!formData.settingValue) {
        setError('El campo settingValue es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.client) {
        setError('El campo client es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await ConfigurationService.update(id, formData);
      } else {
        // Crear nuevo registro
        await ConfigurationService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          configuration_id: 0,
          clientId: 0,
          settingKey: '',
          settingValue: '',
          createdAt: '',
          updatedAt: '',
          client: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} Configuration</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="configuration_id" className="block text-sm font-medium text-gray-700">Configuration_id</label>
          <input
            type="number"
            id="configuration_id"
            name="configuration_id"
            value={formData.configuration_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="clientId" className="block text-sm font-medium text-gray-700">ClientId</label>
          <input
            type="number"
            id="clientId"
            name="clientId"
            value={formData.clientId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="settingKey" className="block text-sm font-medium text-gray-700">SettingKey</label>
          <input
            type="text"
            id="settingKey"
            name="settingKey"
            value={formData.settingKey || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="settingValue" className="block text-sm font-medium text-gray-700">SettingValue</label>
          <input
            type="text"
            id="settingValue"
            name="settingValue"
            value={formData.settingValue || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="client" className="block text-sm font-medium text-gray-700">Client</label>
          <input
            type="text"
            id="client"
            name="client"
            value={formData.client || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default ConfigurationForm;


==================================================
File: components/forms/GeneralExpenseForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { GeneralExpense, GeneralExpenseInput, GeneralExpenseService } from '../../services/generalExpense.service';

interface GeneralExpenseFormProps {
  id?: string;
  onSuccess?: () => void;
}

const GeneralExpenseForm: React.FC<GeneralExpenseFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<GeneralExpenseInput>({
    expense_id: 0,
    budgetId: 0,
    description: '',
    percentage: '',
    amount: '',
    createdAt: '',
    updatedAt: '',
    budget: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await GeneralExpenseService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.budgetId) {
        setError('El campo budgetId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.description) {
        setError('El campo description es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.budget) {
        setError('El campo budget es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await GeneralExpenseService.update(id, formData);
      } else {
        // Crear nuevo registro
        await GeneralExpenseService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          expense_id: 0,
          budgetId: 0,
          description: '',
          percentage: '',
          amount: '',
          createdAt: '',
          updatedAt: '',
          budget: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} GeneralExpense</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="expense_id" className="block text-sm font-medium text-gray-700">Expense_id</label>
          <input
            type="number"
            id="expense_id"
            name="expense_id"
            value={formData.expense_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="budgetId" className="block text-sm font-medium text-gray-700">BudgetId</label>
          <input
            type="number"
            id="budgetId"
            name="budgetId"
            value={formData.budgetId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="description" className="block text-sm font-medium text-gray-700">Description</label>
          <input
            type="text"
            id="description"
            name="description"
            value={formData.description || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="percentage" className="block text-sm font-medium text-gray-700">Percentage</label>
          <input
            type="text"
            id="percentage"
            name="percentage"
            value={formData.percentage || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="amount" className="block text-sm font-medium text-gray-700">Amount</label>
          <input
            type="text"
            id="amount"
            name="amount"
            value={formData.amount || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="budget" className="block text-sm font-medium text-gray-700">Budget</label>
          <input
            type="text"
            id="budget"
            name="budget"
            value={formData.budget || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default GeneralExpenseForm;


==================================================
File: components/forms/PriceCardForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { PriceCard, PriceCardInput, PriceCardService } from '../../services/priceCard.service';

interface PriceCardFormProps {
  id?: string;
  onSuccess?: () => void;
}

const PriceCardForm: React.FC<PriceCardFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<PriceCardInput>({
    price_card_id: 0,
    resourceId: 0,
    provider: '',
    price: '',
    contractType: '',
    effectiveDate: '',
    createdAt: '',
    updatedAt: '',
    resource: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await PriceCardService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.effectiveDate instanceof Date) {
        formattedData.effectiveDate = new Date(formattedData.effectiveDate).toISOString().substring(0, 10);
      }
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.resourceId) {
        setError('El campo resourceId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.provider) {
        setError('El campo provider es requerido');
        setLoading(false);
        return;
      }
      if (!formData.contractType) {
        setError('El campo contractType es requerido');
        setLoading(false);
        return;
      }
      if (!formData.effectiveDate) {
        setError('El campo effectiveDate es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.resource) {
        setError('El campo resource es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await PriceCardService.update(id, formData);
      } else {
        // Crear nuevo registro
        await PriceCardService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          price_card_id: 0,
          resourceId: 0,
          provider: '',
          price: '',
          contractType: '',
          effectiveDate: '',
          createdAt: '',
          updatedAt: '',
          resource: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} PriceCard</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="price_card_id" className="block text-sm font-medium text-gray-700">Price_card_id</label>
          <input
            type="number"
            id="price_card_id"
            name="price_card_id"
            value={formData.price_card_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="resourceId" className="block text-sm font-medium text-gray-700">ResourceId</label>
          <input
            type="number"
            id="resourceId"
            name="resourceId"
            value={formData.resourceId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="provider" className="block text-sm font-medium text-gray-700">Provider</label>
          <input
            type="text"
            id="provider"
            name="provider"
            value={formData.provider || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="price" className="block text-sm font-medium text-gray-700">Price</label>
          <input
            type="text"
            id="price"
            name="price"
            value={formData.price || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="contractType" className="block text-sm font-medium text-gray-700">ContractType</label>
          <input
            type="text"
            id="contractType"
            name="contractType"
            value={formData.contractType || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="effectiveDate" className="block text-sm font-medium text-gray-700">EffectiveDate</label>
          <input
            type="date"
            id="effectiveDate"
            name="effectiveDate"
            value={formData.effectiveDate || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="resource" className="block text-sm font-medium text-gray-700">Resource</label>
          <input
            type="text"
            id="resource"
            name="resource"
            value={formData.resource || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default PriceCardForm;


==================================================
File: components/forms/ProjectForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { Project, ProjectInput, ProjectService } from '../../services/project.service';

interface ProjectFormProps {
  id?: string;
  onSuccess?: () => void;
}

const ProjectForm: React.FC<ProjectFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<ProjectInput>({
    project_id: 0,
    clientId: 0,
    name: '',
    description: '',
    location: '',
    startDate: '',
    endDate: '',
    createdAt: '',
    updatedAt: '',
    client: '',
    budgets: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await ProjectService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.startDate instanceof Date) {
        formattedData.startDate = new Date(formattedData.startDate).toISOString().substring(0, 10);
      }
      if (formattedData.endDate instanceof Date) {
        formattedData.endDate = new Date(formattedData.endDate).toISOString().substring(0, 10);
      }
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.clientId) {
        setError('El campo clientId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.name) {
        setError('El campo name es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.client) {
        setError('El campo client es requerido');
        setLoading(false);
        return;
      }
      if (!formData.budgets) {
        setError('El campo budgets es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await ProjectService.update(id, formData);
      } else {
        // Crear nuevo registro
        await ProjectService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          project_id: 0,
          clientId: 0,
          name: '',
          description: '',
          location: '',
          startDate: '',
          endDate: '',
          createdAt: '',
          updatedAt: '',
          client: '',
          budgets: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} Project</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="project_id" className="block text-sm font-medium text-gray-700">Project_id</label>
          <input
            type="number"
            id="project_id"
            name="project_id"
            value={formData.project_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="clientId" className="block text-sm font-medium text-gray-700">ClientId</label>
          <input
            type="number"
            id="clientId"
            name="clientId"
            value={formData.clientId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="name" className="block text-sm font-medium text-gray-700">Name</label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="description" className="block text-sm font-medium text-gray-700">Description</label>
          <input
            type="text"
            id="description"
            name="description"
            value={formData.description || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="location" className="block text-sm font-medium text-gray-700">Location</label>
          <input
            type="text"
            id="location"
            name="location"
            value={formData.location || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="startDate" className="block text-sm font-medium text-gray-700">StartDate</label>
          <input
            type="date"
            id="startDate"
            name="startDate"
            value={formData.startDate || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="endDate" className="block text-sm font-medium text-gray-700">EndDate</label>
          <input
            type="date"
            id="endDate"
            name="endDate"
            value={formData.endDate || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="client" className="block text-sm font-medium text-gray-700">Client</label>
          <input
            type="text"
            id="client"
            name="client"
            value={formData.client || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="budgets" className="block text-sm font-medium text-gray-700">Budgets</label>
          <input
            type="text"
            id="budgets"
            name="budgets"
            value={formData.budgets || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default ProjectForm;


==================================================
File: components/forms/ResourceFamilyForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { ResourceFamily, ResourceFamilyInput, ResourceFamilyService } from '../../services/resourceFamily.service';

interface ResourceFamilyFormProps {
  id?: string;
  onSuccess?: () => void;
}

const ResourceFamilyForm: React.FC<ResourceFamilyFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<ResourceFamilyInput>({
    family_id: 0,
    name: '',
    description: '',
    createdAt: '',
    updatedAt: '',
    resources: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await ResourceFamilyService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.name) {
        setError('El campo name es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.resources) {
        setError('El campo resources es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await ResourceFamilyService.update(id, formData);
      } else {
        // Crear nuevo registro
        await ResourceFamilyService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          family_id: 0,
          name: '',
          description: '',
          createdAt: '',
          updatedAt: '',
          resources: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} ResourceFamily</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="family_id" className="block text-sm font-medium text-gray-700">Family_id</label>
          <input
            type="number"
            id="family_id"
            name="family_id"
            value={formData.family_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="name" className="block text-sm font-medium text-gray-700">Name</label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="description" className="block text-sm font-medium text-gray-700">Description</label>
          <input
            type="text"
            id="description"
            name="description"
            value={formData.description || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="resources" className="block text-sm font-medium text-gray-700">Resources</label>
          <input
            type="text"
            id="resources"
            name="resources"
            value={formData.resources || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default ResourceFamilyForm;


==================================================
File: components/forms/ResourceForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { Resource, ResourceInput, ResourceService } from '../../services/resource.service';

interface ResourceFormProps {
  id?: string;
  onSuccess?: () => void;
}

const ResourceForm: React.FC<ResourceFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<ResourceInput>({
    resource_id: 0,
    familyId: 0,
    name: '',
    description: '',
    createdAt: '',
    updatedAt: '',
    family: '',
    priceCards: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await ResourceService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.familyId) {
        setError('El campo familyId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.name) {
        setError('El campo name es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.family) {
        setError('El campo family es requerido');
        setLoading(false);
        return;
      }
      if (!formData.priceCards) {
        setError('El campo priceCards es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await ResourceService.update(id, formData);
      } else {
        // Crear nuevo registro
        await ResourceService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          resource_id: 0,
          familyId: 0,
          name: '',
          description: '',
          createdAt: '',
          updatedAt: '',
          family: '',
          priceCards: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} Resource</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="resource_id" className="block text-sm font-medium text-gray-700">Resource_id</label>
          <input
            type="number"
            id="resource_id"
            name="resource_id"
            value={formData.resource_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="familyId" className="block text-sm font-medium text-gray-700">FamilyId</label>
          <input
            type="number"
            id="familyId"
            name="familyId"
            value={formData.familyId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="name" className="block text-sm font-medium text-gray-700">Name</label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="description" className="block text-sm font-medium text-gray-700">Description</label>
          <input
            type="text"
            id="description"
            name="description"
            value={formData.description || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="family" className="block text-sm font-medium text-gray-700">Family</label>
          <input
            type="text"
            id="family"
            name="family"
            value={formData.family || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="priceCards" className="block text-sm font-medium text-gray-700">PriceCards</label>
          <input
            type="text"
            id="priceCards"
            name="priceCards"
            value={formData.priceCards || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default ResourceForm;


==================================================
File: components/forms/UserForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { User, UserInput, UserService } from '../../services/user.service';

interface UserFormProps {
  id?: string;
  onSuccess?: () => void;
}

const UserForm: React.FC<UserFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<UserInput>({
    user_id: 0,
    clientId: 0,
    name: '',
    email: '',
    passwordHash: '',
    role: '',
    createdAt: '',
    updatedAt: '',
    client: '',
    budgets: '',
    assignments: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await UserService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.name) {
        setError('El campo name es requerido');
        setLoading(false);
        return;
      }
      if (!formData.email) {
        setError('El campo email es requerido');
        setLoading(false);
        return;
      }
      if (!formData.passwordHash) {
        setError('El campo passwordHash es requerido');
        setLoading(false);
        return;
      }
      if (!formData.role) {
        setError('El campo role es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.budgets) {
        setError('El campo budgets es requerido');
        setLoading(false);
        return;
      }
      if (!formData.assignments) {
        setError('El campo assignments es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await UserService.update(id, formData);
      } else {
        // Crear nuevo registro
        await UserService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          user_id: 0,
          clientId: 0,
          name: '',
          email: '',
          passwordHash: '',
          role: '',
          createdAt: '',
          updatedAt: '',
          client: '',
          budgets: '',
          assignments: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} User</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="user_id" className="block text-sm font-medium text-gray-700">User_id</label>
          <input
            type="number"
            id="user_id"
            name="user_id"
            value={formData.user_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="clientId" className="block text-sm font-medium text-gray-700">ClientId</label>
          <input
            type="number"
            id="clientId"
            name="clientId"
            value={formData.clientId ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="name" className="block text-sm font-medium text-gray-700">Name</label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="email" className="block text-sm font-medium text-gray-700">Email</label>
          <input
            type="text"
            id="email"
            name="email"
            value={formData.email || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="passwordHash" className="block text-sm font-medium text-gray-700">PasswordHash</label>
          <input
            type="text"
            id="passwordHash"
            name="passwordHash"
            value={formData.passwordHash || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="role" className="block text-sm font-medium text-gray-700">Role</label>
          <input
            type="text"
            id="role"
            name="role"
            value={formData.role || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="client" className="block text-sm font-medium text-gray-700">Client</label>
          <input
            type="text"
            id="client"
            name="client"
            value={formData.client || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="budgets" className="block text-sm font-medium text-gray-700">Budgets</label>
          <input
            type="text"
            id="budgets"
            name="budgets"
            value={formData.budgets || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="assignments" className="block text-sm font-medium text-gray-700">Assignments</label>
          <input
            type="text"
            id="assignments"
            name="assignments"
            value={formData.assignments || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default UserForm;


==================================================
File: components/layout/AppLayout.tsx
==================================================

import React from 'react';
import Sidebar from '../Sidebar';

interface AppLayoutProps {
  children: React.ReactNode;
}

const AppLayout: React.FC<AppLayoutProps> = ({ children }) => {
  return (
    <div className="h-screen flex overflow-hidden bg-secondary-100 dark:bg-secondary-900">
      {/* Sidebar */}
      <Sidebar />

      {/* Main Content */}
      <div className="flex-1 flex flex-col overflow-hidden lg:pl-64">
        {/* Top Header */}
        <header className="w-full h-16 bg-white dark:bg-secondary-800 shadow flex items-center justify-between px-6">
          <h1 className="text-xl font-semibold text-secondary-900 dark:text-white">
            Aplicación CRUD generada automáticamente
          </h1>
          <div className="flex items-center">
            {/* Add user profile, theme toggle, notifications, etc. here */}
          </div>
        </header>

        {/* Page Content */}
        <main className="flex-1 overflow-auto p-6">
          <div className="max-w-7xl mx-auto">
            <div className="bg-white dark:bg-secondary-800 rounded-lg shadow p-6">
              {children}
            </div>
          </div>
        </main>
      </div>
    </div>
  );
};

export default AppLayout;

==================================================
File: components/tables/BudgetAssignmentTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { BudgetAssignment, BudgetAssignmentService } from '../../services/budgetAssignment.service';

interface BudgetAssignmentTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const BudgetAssignmentTable: React.FC<BudgetAssignmentTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<BudgetAssignment[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await BudgetAssignmentService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await BudgetAssignmentService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              assignment_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              budgetId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              userId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              roleInBudget
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              budget
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              user
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.assignment_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.budgetId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.userId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.roleInBudget)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.budget)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.user)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default BudgetAssignmentTable;


==================================================
File: components/tables/BudgetItemTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { BudgetItem, BudgetItemService } from '../../services/budgetItem.service';

interface BudgetItemTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const BudgetItemTable: React.FC<BudgetItemTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<BudgetItem[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await BudgetItemService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await BudgetItemService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              item_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              budgetId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              titleId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              subtitleId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              code
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              description
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              quantity
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              unit
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              unitPrice
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              metradoTotal
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              formula
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              materialsCost
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              laborCost
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              equipmentCost
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              incidencePercentage
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              budget
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              title
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              subtitle
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              measurements
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.item_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.budgetId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.titleId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.subtitleId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.code)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.description)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.quantity)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.unit)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.unitPrice)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.metradoTotal)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.formula)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.materialsCost)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.laborCost)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.equipmentCost)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.incidencePercentage)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.budget)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.title)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.subtitle)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.measurements)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default BudgetItemTable;


==================================================
File: components/tables/BudgetMeasurementTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { BudgetMeasurement, BudgetMeasurementService } from '../../services/budgetMeasurement.service';

interface BudgetMeasurementTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const BudgetMeasurementTable: React.FC<BudgetMeasurementTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<BudgetMeasurement[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await BudgetMeasurementService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await BudgetMeasurementService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              measurement_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              itemId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              productionUnit
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              quantity
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              metradoValue
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              item
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.measurement_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.itemId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.productionUnit)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.quantity)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.metradoValue)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.item)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default BudgetMeasurementTable;


==================================================
File: components/tables/BudgetSubtitleTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { BudgetSubtitle, BudgetSubtitleService } from '../../services/budgetSubtitle.service';

interface BudgetSubtitleTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const BudgetSubtitleTable: React.FC<BudgetSubtitleTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<BudgetSubtitle[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await BudgetSubtitleService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await BudgetSubtitleService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              subtitle_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              titleId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              name
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              orderIndex
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              title
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              items
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.subtitle_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.titleId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.name)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.orderIndex)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.title)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.items)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default BudgetSubtitleTable;


==================================================
File: components/tables/BudgetTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { Budget, BudgetService } from '../../services/budget.service';

interface BudgetTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const BudgetTable: React.FC<BudgetTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<Budget[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await BudgetService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await BudgetService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              budget_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              projectId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              code
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              obraName
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              owner
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              baseDate
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              status
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              responsibleUserId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              project
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              responsibleUser
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              titles
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              items
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              assignments
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              generalExpenses
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.budget_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.projectId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.code)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.obraName)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.owner)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.baseDate)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.status)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.responsibleUserId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.project)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.responsibleUser)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.titles)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.items)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.assignments)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.generalExpenses)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default BudgetTable;


==================================================
File: components/tables/BudgetTitleTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { BudgetTitle, BudgetTitleService } from '../../services/budgetTitle.service';

interface BudgetTitleTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const BudgetTitleTable: React.FC<BudgetTitleTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<BudgetTitle[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await BudgetTitleService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await BudgetTitleService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              title_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              budgetId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              name
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              orderIndex
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              budget
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              subtitles
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              items
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.title_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.budgetId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.name)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.orderIndex)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.budget)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.subtitles)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.items)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default BudgetTitleTable;


==================================================
File: components/tables/ClientTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { Client, ClientService } from '../../services/client.service';

interface ClientTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const ClientTable: React.FC<ClientTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<Client[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await ClientService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await ClientService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              client_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              name
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              logoUrl
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              colorScheme
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              projects
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              users
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              configurations
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.client_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.name)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.logoUrl)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.colorScheme)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.projects)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.users)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.configurations)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ClientTable;


==================================================
File: components/tables/ConfigurationTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { Configuration, ConfigurationService } from '../../services/configuration.service';

interface ConfigurationTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const ConfigurationTable: React.FC<ConfigurationTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<Configuration[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await ConfigurationService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await ConfigurationService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              configuration_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              clientId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              settingKey
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              settingValue
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              client
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.configuration_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.clientId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.settingKey)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.settingValue)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.client)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ConfigurationTable;


==================================================
File: components/tables/GeneralExpenseTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { GeneralExpense, GeneralExpenseService } from '../../services/generalExpense.service';

interface GeneralExpenseTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const GeneralExpenseTable: React.FC<GeneralExpenseTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<GeneralExpense[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await GeneralExpenseService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await GeneralExpenseService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              expense_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              budgetId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              description
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              percentage
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              amount
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              budget
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.expense_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.budgetId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.description)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.percentage)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.amount)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.budget)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default GeneralExpenseTable;


==================================================
File: components/tables/PriceCardTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { PriceCard, PriceCardService } from '../../services/priceCard.service';

interface PriceCardTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const PriceCardTable: React.FC<PriceCardTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<PriceCard[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await PriceCardService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await PriceCardService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              price_card_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              resourceId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              provider
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              price
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              contractType
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              effectiveDate
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              resource
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.price_card_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.resourceId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.provider)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.price)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.contractType)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.effectiveDate)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.resource)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default PriceCardTable;


==================================================
File: components/tables/ProjectTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { Project, ProjectService } from '../../services/project.service';

interface ProjectTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const ProjectTable: React.FC<ProjectTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<Project[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await ProjectService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await ProjectService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              project_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              clientId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              name
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              description
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              location
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              startDate
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              endDate
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              client
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              budgets
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.project_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.clientId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.name)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.description)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.location)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.startDate)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.endDate)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.client)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.budgets)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ProjectTable;


==================================================
File: components/tables/ResourceFamilyTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { ResourceFamily, ResourceFamilyService } from '../../services/resourceFamily.service';

interface ResourceFamilyTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const ResourceFamilyTable: React.FC<ResourceFamilyTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<ResourceFamily[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await ResourceFamilyService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await ResourceFamilyService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              family_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              name
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              description
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              resources
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.family_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.name)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.description)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.resources)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ResourceFamilyTable;


==================================================
File: components/tables/ResourceTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { Resource, ResourceService } from '../../services/resource.service';

interface ResourceTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const ResourceTable: React.FC<ResourceTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<Resource[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await ResourceService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await ResourceService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              resource_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              familyId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              name
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              description
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              family
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              priceCards
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.resource_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.familyId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.name)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.description)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.family)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.priceCards)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ResourceTable;


==================================================
File: components/tables/UserTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { User, UserService } from '../../services/user.service';

interface UserTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const UserTable: React.FC<UserTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<User[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await UserService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await UserService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              user_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              clientId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              name
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              email
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              passwordHash
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              role
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              client
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              budgets
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              assignments
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.user_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.clientId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.name)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.email)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.passwordHash)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.role)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.client)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.budgets)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.assignments)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default UserTable;


==================================================
File: index.css
==================================================

@tailwind base;
@tailwind components;
@tailwind utilities;
@layer base {
  html {
    font-size: 16px;
  }
  body {
    font-family: 'Inter', sans-serif;
    font-size: 1rem;
    line-height: 1.5;
    color: #333;
  }
}

==================================================
File: main.tsx
==================================================

import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import './index.css';

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>
);


==================================================
File: pages/BudgetAssignmentPage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import BudgetAssignmentForm from '../components/forms/BudgetAssignmentForm';
import BudgetAssignmentTable from '../components/tables/BudgetAssignmentTable';

const BudgetAssignmentPage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/budgetAssignments/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/budgetAssignments');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">BudgetAssignments</h2>
                <button
                  onClick={() => navigate('/budgetAssignments/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo BudgetAssignment
                </button>
              </div>
              <BudgetAssignmentTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/budgetAssignments')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <BudgetAssignmentForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/budgetAssignments')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <BudgetAssignmentForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default BudgetAssignmentPage;


==================================================
File: pages/BudgetItemPage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import BudgetItemForm from '../components/forms/BudgetItemForm';
import BudgetItemTable from '../components/tables/BudgetItemTable';

const BudgetItemPage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/budgetItems/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/budgetItems');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">BudgetItems</h2>
                <button
                  onClick={() => navigate('/budgetItems/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo BudgetItem
                </button>
              </div>
              <BudgetItemTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/budgetItems')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <BudgetItemForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/budgetItems')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <BudgetItemForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default BudgetItemPage;


==================================================
File: pages/BudgetMeasurementPage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import BudgetMeasurementForm from '../components/forms/BudgetMeasurementForm';
import BudgetMeasurementTable from '../components/tables/BudgetMeasurementTable';

const BudgetMeasurementPage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/budgetMeasurements/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/budgetMeasurements');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">BudgetMeasurements</h2>
                <button
                  onClick={() => navigate('/budgetMeasurements/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo BudgetMeasurement
                </button>
              </div>
              <BudgetMeasurementTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/budgetMeasurements')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <BudgetMeasurementForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/budgetMeasurements')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <BudgetMeasurementForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default BudgetMeasurementPage;


==================================================
File: pages/BudgetPage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import BudgetForm from '../components/forms/BudgetForm';
import BudgetTable from '../components/tables/BudgetTable';

const BudgetPage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/budgets/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/budgets');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">Budgets</h2>
                <button
                  onClick={() => navigate('/budgets/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo Budget
                </button>
              </div>
              <BudgetTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/budgets')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <BudgetForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/budgets')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <BudgetForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default BudgetPage;


==================================================
File: pages/BudgetSubtitlePage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import BudgetSubtitleForm from '../components/forms/BudgetSubtitleForm';
import BudgetSubtitleTable from '../components/tables/BudgetSubtitleTable';

const BudgetSubtitlePage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/budgetSubtitles/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/budgetSubtitles');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">BudgetSubtitles</h2>
                <button
                  onClick={() => navigate('/budgetSubtitles/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo BudgetSubtitle
                </button>
              </div>
              <BudgetSubtitleTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/budgetSubtitles')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <BudgetSubtitleForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/budgetSubtitles')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <BudgetSubtitleForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default BudgetSubtitlePage;


==================================================
File: pages/BudgetTitlePage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import BudgetTitleForm from '../components/forms/BudgetTitleForm';
import BudgetTitleTable from '../components/tables/BudgetTitleTable';

const BudgetTitlePage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/budgetTitles/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/budgetTitles');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">BudgetTitles</h2>
                <button
                  onClick={() => navigate('/budgetTitles/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo BudgetTitle
                </button>
              </div>
              <BudgetTitleTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/budgetTitles')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <BudgetTitleForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/budgetTitles')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <BudgetTitleForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default BudgetTitlePage;


==================================================
File: pages/ClientPage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import ClientForm from '../components/forms/ClientForm';
import ClientTable from '../components/tables/ClientTable';

const ClientPage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/clients/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/clients');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">Clients</h2>
                <button
                  onClick={() => navigate('/clients/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo Client
                </button>
              </div>
              <ClientTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/clients')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <ClientForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/clients')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <ClientForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default ClientPage;


==================================================
File: pages/ConfigurationPage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import ConfigurationForm from '../components/forms/ConfigurationForm';
import ConfigurationTable from '../components/tables/ConfigurationTable';

const ConfigurationPage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/configurations/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/configurations');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">Configurations</h2>
                <button
                  onClick={() => navigate('/configurations/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo Configuration
                </button>
              </div>
              <ConfigurationTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/configurations')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <ConfigurationForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/configurations')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <ConfigurationForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default ConfigurationPage;


==================================================
File: pages/GeneralExpensePage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import GeneralExpenseForm from '../components/forms/GeneralExpenseForm';
import GeneralExpenseTable from '../components/tables/GeneralExpenseTable';

const GeneralExpensePage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/generalExpenses/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/generalExpenses');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">GeneralExpenses</h2>
                <button
                  onClick={() => navigate('/generalExpenses/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo GeneralExpense
                </button>
              </div>
              <GeneralExpenseTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/generalExpenses')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <GeneralExpenseForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/generalExpenses')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <GeneralExpenseForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default GeneralExpensePage;


==================================================
File: pages/PriceCardPage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import PriceCardForm from '../components/forms/PriceCardForm';
import PriceCardTable from '../components/tables/PriceCardTable';

const PriceCardPage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/priceCards/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/priceCards');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">PriceCards</h2>
                <button
                  onClick={() => navigate('/priceCards/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo PriceCard
                </button>
              </div>
              <PriceCardTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/priceCards')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <PriceCardForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/priceCards')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <PriceCardForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default PriceCardPage;


==================================================
File: pages/ProjectPage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import ProjectForm from '../components/forms/ProjectForm';
import ProjectTable from '../components/tables/ProjectTable';

const ProjectPage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/projects/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/projects');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">Projects</h2>
                <button
                  onClick={() => navigate('/projects/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo Project
                </button>
              </div>
              <ProjectTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/projects')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <ProjectForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/projects')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <ProjectForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default ProjectPage;


==================================================
File: pages/ResourceFamilyPage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import ResourceFamilyForm from '../components/forms/ResourceFamilyForm';
import ResourceFamilyTable from '../components/tables/ResourceFamilyTable';

const ResourceFamilyPage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/resourceFamilys/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/resourceFamilys');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">ResourceFamilys</h2>
                <button
                  onClick={() => navigate('/resourceFamilys/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo ResourceFamily
                </button>
              </div>
              <ResourceFamilyTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/resourceFamilys')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <ResourceFamilyForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/resourceFamilys')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <ResourceFamilyForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default ResourceFamilyPage;


==================================================
File: pages/ResourcePage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import ResourceForm from '../components/forms/ResourceForm';
import ResourceTable from '../components/tables/ResourceTable';

const ResourcePage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/resources/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/resources');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">Resources</h2>
                <button
                  onClick={() => navigate('/resources/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo Resource
                </button>
              </div>
              <ResourceTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/resources')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <ResourceForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/resources')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <ResourceForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default ResourcePage;


==================================================
File: pages/UserPage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import UserForm from '../components/forms/UserForm';
import UserTable from '../components/tables/UserTable';

const UserPage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/users/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/users');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">Users</h2>
                <button
                  onClick={() => navigate('/users/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo User
                </button>
              </div>
              <UserTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/users')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <UserForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/users')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <UserForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default UserPage;


==================================================
File: pages/index.ts
==================================================


import ClientPage from './ClientPage';
import ProjectPage from './ProjectPage';
import BudgetPage from './BudgetPage';
import BudgetTitlePage from './BudgetTitlePage';
import BudgetSubtitlePage from './BudgetSubtitlePage';
import BudgetItemPage from './BudgetItemPage';
import BudgetMeasurementPage from './BudgetMeasurementPage';
import ResourceFamilyPage from './ResourceFamilyPage';
import ResourcePage from './ResourcePage';
import PriceCardPage from './PriceCardPage';
import UserPage from './UserPage';
import BudgetAssignmentPage from './BudgetAssignmentPage';
import GeneralExpensePage from './GeneralExpensePage';
import ConfigurationPage from './ConfigurationPage';

export {
  ClientPage,
  ProjectPage,
  BudgetPage,
  BudgetTitlePage,
  BudgetSubtitlePage,
  BudgetItemPage,
  BudgetMeasurementPage,
  ResourceFamilyPage,
  ResourcePage,
  PriceCardPage,
  UserPage,
  BudgetAssignmentPage,
  GeneralExpensePage,
  ConfigurationPage
};


==================================================
File: services/apiClient.ts
==================================================


import axios from 'axios';

// Configuración base para axios
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001/api';

const apiClient = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Interceptor para manejar errores globalmente
apiClient.interceptors.response.use(
  (response) => response,
  (error) => {
    console.error('API Error:', error.response?.data || error.message);
    return Promise.reject(error);
  }
);

export default apiClient;


==================================================
File: services/budget.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface Budget {
  budget_id: number;
  projectId: number;
  code: string;
  obraName: string;
  owner: string;
  baseDate: Date;
  status: any;
  responsibleUserId: number;
  createdAt: Date;
  updatedAt: Date;
  project: any;
  responsibleUser: any;
  titles: any;
  items: any;
  assignments: any;
  generalExpenses: any;
}

export type BudgetInput = Omit<Budget, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/budgets';

// Servicio para Budget
export const BudgetService = {
  // Obtener todos los registros
  getAll: async (): Promise<Budget[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<Budget> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: BudgetInput): Promise<Budget> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<BudgetInput>): Promise<Budget> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: services/budgetAssignment.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface BudgetAssignment {
  assignment_id: number;
  budgetId: number;
  userId: number;
  roleInBudget: string;
  createdAt: Date;
  updatedAt: Date;
  budget: any;
  user: any;
}

export type BudgetAssignmentInput = Omit<BudgetAssignment, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/budgetAssignments';

// Servicio para BudgetAssignment
export const BudgetAssignmentService = {
  // Obtener todos los registros
  getAll: async (): Promise<BudgetAssignment[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<BudgetAssignment> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: BudgetAssignmentInput): Promise<BudgetAssignment> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<BudgetAssignmentInput>): Promise<BudgetAssignment> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: services/budgetItem.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface BudgetItem {
  item_id: number;
  budgetId: number;
  titleId: number;
  subtitleId: number;
  code: string;
  description: string;
  quantity: any;
  unit: string;
  unitPrice: any;
  metradoTotal: any;
  formula: string;
  materialsCost: any;
  laborCost: any;
  equipmentCost: any;
  incidencePercentage: any;
  createdAt: Date;
  updatedAt: Date;
  budget: any;
  title: any;
  subtitle: any;
  measurements: any;
}

export type BudgetItemInput = Omit<BudgetItem, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/budgetItems';

// Servicio para BudgetItem
export const BudgetItemService = {
  // Obtener todos los registros
  getAll: async (): Promise<BudgetItem[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<BudgetItem> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: BudgetItemInput): Promise<BudgetItem> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<BudgetItemInput>): Promise<BudgetItem> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: services/budgetMeasurement.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface BudgetMeasurement {
  measurement_id: number;
  itemId: number;
  productionUnit: string;
  quantity: any;
  metradoValue: any;
  createdAt: Date;
  updatedAt: Date;
  item: any;
}

export type BudgetMeasurementInput = Omit<BudgetMeasurement, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/budgetMeasurements';

// Servicio para BudgetMeasurement
export const BudgetMeasurementService = {
  // Obtener todos los registros
  getAll: async (): Promise<BudgetMeasurement[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<BudgetMeasurement> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: BudgetMeasurementInput): Promise<BudgetMeasurement> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<BudgetMeasurementInput>): Promise<BudgetMeasurement> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: services/budgetSubtitle.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface BudgetSubtitle {
  subtitle_id: number;
  titleId: number;
  name: string;
  orderIndex: number;
  createdAt: Date;
  updatedAt: Date;
  title: any;
  items: any;
}

export type BudgetSubtitleInput = Omit<BudgetSubtitle, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/budgetSubtitles';

// Servicio para BudgetSubtitle
export const BudgetSubtitleService = {
  // Obtener todos los registros
  getAll: async (): Promise<BudgetSubtitle[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<BudgetSubtitle> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: BudgetSubtitleInput): Promise<BudgetSubtitle> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<BudgetSubtitleInput>): Promise<BudgetSubtitle> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: services/budgetTitle.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface BudgetTitle {
  title_id: number;
  budgetId: number;
  name: string;
  orderIndex: number;
  createdAt: Date;
  updatedAt: Date;
  budget: any;
  subtitles: any;
  items: any;
}

export type BudgetTitleInput = Omit<BudgetTitle, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/budgetTitles';

// Servicio para BudgetTitle
export const BudgetTitleService = {
  // Obtener todos los registros
  getAll: async (): Promise<BudgetTitle[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<BudgetTitle> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: BudgetTitleInput): Promise<BudgetTitle> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<BudgetTitleInput>): Promise<BudgetTitle> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: services/client.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface Client {
  client_id: number;
  name: string;
  logoUrl: string;
  colorScheme: string;
  createdAt: Date;
  updatedAt: Date;
  projects: any;
  users: any;
  configurations: any;
}

export type ClientInput = Omit<Client, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/clients';

// Servicio para Client
export const ClientService = {
  // Obtener todos los registros
  getAll: async (): Promise<Client[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<Client> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: ClientInput): Promise<Client> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<ClientInput>): Promise<Client> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: services/configuration.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface Configuration {
  configuration_id: number;
  clientId: number;
  settingKey: string;
  settingValue: string;
  createdAt: Date;
  updatedAt: Date;
  client: any;
}

export type ConfigurationInput = Omit<Configuration, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/configurations';

// Servicio para Configuration
export const ConfigurationService = {
  // Obtener todos los registros
  getAll: async (): Promise<Configuration[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<Configuration> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: ConfigurationInput): Promise<Configuration> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<ConfigurationInput>): Promise<Configuration> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: services/generalExpense.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface GeneralExpense {
  expense_id: number;
  budgetId: number;
  description: string;
  percentage: any;
  amount: any;
  createdAt: Date;
  updatedAt: Date;
  budget: any;
}

export type GeneralExpenseInput = Omit<GeneralExpense, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/generalExpenses';

// Servicio para GeneralExpense
export const GeneralExpenseService = {
  // Obtener todos los registros
  getAll: async (): Promise<GeneralExpense[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<GeneralExpense> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: GeneralExpenseInput): Promise<GeneralExpense> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<GeneralExpenseInput>): Promise<GeneralExpense> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: services/priceCard.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface PriceCard {
  price_card_id: number;
  resourceId: number;
  provider: string;
  price: any;
  contractType: any;
  effectiveDate: Date;
  createdAt: Date;
  updatedAt: Date;
  resource: any;
}

export type PriceCardInput = Omit<PriceCard, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/priceCards';

// Servicio para PriceCard
export const PriceCardService = {
  // Obtener todos los registros
  getAll: async (): Promise<PriceCard[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<PriceCard> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: PriceCardInput): Promise<PriceCard> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<PriceCardInput>): Promise<PriceCard> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: services/project.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface Project {
  project_id: number;
  clientId: number;
  name: string;
  description: string;
  location: string;
  startDate: Date;
  endDate: Date;
  createdAt: Date;
  updatedAt: Date;
  client: any;
  budgets: any;
}

export type ProjectInput = Omit<Project, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/projects';

// Servicio para Project
export const ProjectService = {
  // Obtener todos los registros
  getAll: async (): Promise<Project[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<Project> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: ProjectInput): Promise<Project> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<ProjectInput>): Promise<Project> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: services/resource.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface Resource {
  resource_id: number;
  familyId: number;
  name: string;
  description: string;
  createdAt: Date;
  updatedAt: Date;
  family: any;
  priceCards: any;
}

export type ResourceInput = Omit<Resource, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/resources';

// Servicio para Resource
export const ResourceService = {
  // Obtener todos los registros
  getAll: async (): Promise<Resource[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<Resource> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: ResourceInput): Promise<Resource> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<ResourceInput>): Promise<Resource> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: services/resourceFamily.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface ResourceFamily {
  family_id: number;
  name: string;
  description: string;
  createdAt: Date;
  updatedAt: Date;
  resources: any;
}

export type ResourceFamilyInput = Omit<ResourceFamily, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/resourceFamilys';

// Servicio para ResourceFamily
export const ResourceFamilyService = {
  // Obtener todos los registros
  getAll: async (): Promise<ResourceFamily[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<ResourceFamily> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: ResourceFamilyInput): Promise<ResourceFamily> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<ResourceFamilyInput>): Promise<ResourceFamily> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: services/user.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface User {
  user_id: number;
  clientId: number;
  name: string;
  email: string;
  passwordHash: string;
  role: any;
  createdAt: Date;
  updatedAt: Date;
  client: any;
  budgets: any;
  assignments: any;
}

export type UserInput = Omit<User, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/users';

// Servicio para User
export const UserService = {
  // Obtener todos los registros
  getAll: async (): Promise<User[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<User> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: UserInput): Promise<User> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<UserInput>): Promise<User> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: vite-env.d.ts
==================================================

/// <reference types="vite/client" />

==================================================
File: package.json
==================================================

{
    "name": "tet-client",
    "private": true,
    "version": "0.0.0",
    "type": "module",
    "scripts": {
        "dev": "vite",
        "build": "vite build",
        "lint": "eslint .",
        "preview": "vite preview"
    },
    "dependencies": {
        "@heroicons/react": "^2.2.0",
        "@tailwindcss/forms": "^0.5.10",
        "@tailwindcss/postcss": "^4.1.3",
        "@tailwindcss/vite": "^4.1.3",
        "axios": "^1.8.4",
        "date-fns": "^3.3.1",
        "firebase": "^10.8.0",
        "lucide-react": "^0.344.0",
        "react": "^18.3.1",
        "react-dom": "^18.3.1",
        "react-hot-toast": "^2.5.2",
        "react-router-dom": "^6.22.2",
        "recharts": "^2.15.1"
    },
    "devDependencies": {
        "@eslint/js": "^9.9.1",
        "@types/react": "^18.3.5",
        "@types/react-dom": "^18.3.0",
        "@vitejs/plugin-react": "^4.3.1",
        "autoprefixer": "^10.4.18",
        "eslint": "^9.9.1",
        "eslint-plugin-react-hooks": "^5.1.0-rc.0",
        "eslint-plugin-react-refresh": "^0.4.11",
        "globals": "^15.9.0",
        "tailwindcss": "^4.1.3",
        "typescript": "^5.5.3",
        "typescript-eslint": "^8.3.0",
        "vite": "^5.4.2"
    }
}

==================================================
File: postcss.config.js
==================================================

export default {
  plugins: {
    '@tailwindcss/postcss': {},

    autoprefixer: {},
  },
};


==================================================
File: src/App.tsx
==================================================

import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';

// Import components and layout
import AppLayout from './components/layout/AppLayout';

// Import pages
import ClientPage from './pages/ClientPage';
import ProjectPage from './pages/ProjectPage';
import BudgetPage from './pages/BudgetPage';
import BudgetTitlePage from './pages/BudgetTitlePage';
import BudgetSubtitlePage from './pages/BudgetSubtitlePage';
import BudgetItemPage from './pages/BudgetItemPage';
import BudgetMeasurementPage from './pages/BudgetMeasurementPage';
import ResourceFamilyPage from './pages/ResourceFamilyPage';
import ResourcePage from './pages/ResourcePage';
import PriceCardPage from './pages/PriceCardPage';
import UserPage from './pages/UserPage';
import BudgetAssignmentPage from './pages/BudgetAssignmentPage';
import GeneralExpensePage from './pages/GeneralExpensePage';
import ConfigurationPage from './pages/ConfigurationPage';

// Home component
const Home: React.FC = () => {
  return (
    <div className="bg-white dark:bg-secondary-800 shadow overflow-hidden sm:rounded-lg">
      <div className="px-4 py-5 sm:px-6">
        <h2 className="text-lg leading-6 font-medium text-secondary-900 dark:text-white">Bienvenido a la aplicación CRUD</h2>
        <p className="mt-1 max-w-2xl text-sm text-secondary-500 dark:text-secondary-300">
          Selecciona una entidad del menú lateral para comenzar.
        </p>
      </div>
      <div className="border-t border-secondary-200 dark:border-secondary-700">
        <dl>
          <div className="bg-secondary-50 dark:bg-secondary-800 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
            <dt className="text-sm font-medium text-secondary-500 dark:text-secondary-300">Entidades disponibles</dt>
            <dd className="mt-1 text-sm text-secondary-900 dark:text-secondary-100 sm:mt-0 sm:col-span-2">
              <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
                {[
                  { name: 'Clients', path: '/clients' },
                  { name: 'Projects', path: '/projects' },
                  { name: 'Budgets', path: '/budgets' },
                  { name: 'Budget Titles', path: '/budgetTitles' },
                  { name: 'Budget Subtitles', path: '/budgetSubtitles' },
                  { name: 'Budget Items', path: '/budgetItems' },
                  { name: 'Budget Measurements', path: '/budgetMeasurements' },
                  { name: 'Resource Families', path: '/resourceFamilys' },
                  { name: 'Resources', path: '/resources' },
                  { name: 'Price Cards', path: '/priceCards' },
                  { name: 'Users', path: '/users' },
                  { name: 'Budget Assignments', path: '/budgetAssignments' },
                  { name: 'General Expenses', path: '/generalExpenses' },
                  { name: 'Configurations', path: '/configurations' },
                ].map((item) => (
                  <div key={item.name} className="flex items-center p-3 rounded-md bg-white dark:bg-secondary-700 shadow-sm hover:shadow-md transition-shadow">
                    <a href={item.path} className="w-full text-primary-600 dark:text-primary-400 hover:text-primary-800 dark:hover:text-primary-300 font-medium">
                      {item.name}
                    </a>
                  </div>
                ))}
              </div>
            </dd>
          </div>
        </dl>
      </div>
    </div>
  );
};

const App: React.FC = () => {
  return (
    <Router>
      <AppLayout>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/clients/*" element={<ClientPage />} />
          <Route path="/projects/*" element={<ProjectPage />} />
          <Route path="/budgets/*" element={<BudgetPage />} />
          <Route path="/budgetTitles/*" element={<BudgetTitlePage />} />
          <Route path="/budgetSubtitles/*" element={<BudgetSubtitlePage />} />
          <Route path="/budgetItems/*" element={<BudgetItemPage />} />
          <Route path="/budgetMeasurements/*" element={<BudgetMeasurementPage />} />
          <Route path="/resourceFamilys/*" element={<ResourceFamilyPage />} />
          <Route path="/resources/*" element={<ResourcePage />} />
          <Route path="/priceCards/*" element={<PriceCardPage />} />
          <Route path="/users/*" element={<UserPage />} />
          <Route path="/budgetAssignments/*" element={<BudgetAssignmentPage />} />
          <Route path="/generalExpenses/*" element={<GeneralExpensePage />} />
          <Route path="/configurations/*" element={<ConfigurationPage />} />
        </Routes>
      </AppLayout>
    </Router>
  );
};

export default App;

==================================================
File: src/components/Sidebar.tsx
==================================================

import React, { useState, useEffect } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { 
  UserIcon, UsersIcon, FolderIcon, CubeIcon, 
  BookOpenIcon, WrenchScrewdriverIcon, CogIcon, 
  Squares2X2Icon, ClipboardDocumentListIcon, CurrencyDollarIcon,
  BuildingOfficeIcon, TagIcon, XMarkIcon, Bars3Icon 
} from '@heroicons/react/24/outline';

interface NavItem {
  name: string;
  path: string;
  icon: React.ReactNode;
}

const Sidebar: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const location = useLocation();
  
  // Close sidebar when clicking outside on mobile
  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth >= 1024) {
        setIsOpen(true);
      } else {
        setIsOpen(false);
      }
    };

    // Set initial state
    handleResize();
    
    // Add event listener
    window.addEventListener('resize', handleResize);
    
    // Cleanup
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  // Close sidebar when route changes on mobile
  useEffect(() => {
    if (window.innerWidth < 1024) {
      setIsOpen(false);
    }
  }, [location.pathname]);

  const navItems: NavItem[] = [
    { name: 'Dashboard', path: '/', icon: <Squares2X2Icon className="w-6 h-6" /> },
    { name: 'Clients', path: '/clients', icon: <BuildingOfficeIcon className="w-6 h-6" /> },
    { name: 'Projects', path: '/projects', icon: <FolderIcon className="w-6 h-6" /> },
    { name: 'Budgets', path: '/budgets', icon: <ClipboardDocumentListIcon className="w-6 h-6" /> },
    { name: 'Budget Titles', path: '/budgetTitles', icon: <BookOpenIcon className="w-6 h-6" /> },
    { name: 'Budget Subtitles', path: '/budgetSubtitles', icon: <BookOpenIcon className="w-6 h-6" /> },
    { name: 'Budget Items', path: '/budgetItems', icon: <ClipboardDocumentListIcon className="w-6 h-6" /> },
    { name: 'Budget Measurements', path: '/budgetMeasurements', icon: <ClipboardDocumentListIcon className="w-6 h-6" /> },
    { name: 'Resource Families', path: '/resourceFamilys', icon: <CubeIcon className="w-6 h-6" /> },
    { name: 'Resources', path: '/resources', icon: <WrenchScrewdriverIcon className="w-6 h-6" /> },
    { name: 'Price Cards', path: '/priceCards', icon: <CurrencyDollarIcon className="w-6 h-6" /> },
    { name: 'Users', path: '/users', icon: <UserIcon className="w-6 h-6" /> },
    { name: 'Budget Assignments', path: '/budgetAssignments', icon: <UsersIcon className="w-6 h-6" /> },
    { name: 'General Expenses', path: '/generalExpenses', icon: <TagIcon className="w-6 h-6" /> },
    { name: 'Configurations', path: '/configurations', icon: <CogIcon className="w-6 h-6" /> },
  ];

  return (
    <>
      {/* Mobile menu button */}
      <div className="lg:hidden fixed top-0 left-0 z-40 m-4">
        <button
          onClick={() => setIsOpen(!isOpen)}
          className="bg-primary-600 text-white p-2 rounded-md focus:outline-none"
        >
          <Bars3Icon className="w-6 h-6" />
        </button>
      </div>

      {/* Backdrop for mobile */}
      {isOpen && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-30 lg:hidden"
          onClick={() => setIsOpen(false)}
        />
      )}

      {/* Sidebar */}
      <div 
        className={`fixed inset-y-0 left-0 z-40 w-64 bg-white dark:bg-secondary-900 shadow-lg transform transition-transform duration-300 ease-in-out ${
          isOpen ? 'translate-x-0' : '-translate-x-full'
        } lg:translate-x-0 overflow-y-auto`}
      >
        <div className="flex items-center justify-between h-16 px-6 border-b border-secondary-200 dark:border-secondary-700">
          <h1 className="text-xl font-bold text-primary-600 dark:text-white">CRUD App</h1>
          <button
            onClick={() => setIsOpen(false)}
            className="text-secondary-500 hover:text-secondary-700 lg:hidden"
          >
            <XMarkIcon className="w-6 h-6" />
          </button>
        </div>

        <nav className="mt-4 px-2">
          <div className="space-y-1">
            {navItems.map((item) => {
              const isActive = location.pathname === item.path || 
                               (item.path !== '/' && location.pathname.startsWith(item.path));
              
              return (
                <Link
                  key={item.name}
                  to={item.path}
                  className={`group flex items-center px-2 py-2 text-sm font-medium rounded-md transition-colors ${
                    isActive
                      ? 'bg-primary-100 text-primary-700 dark:bg-primary-900 dark:text-primary-100'
                      : 'text-secondary-600 hover:bg-secondary-100 dark:text-secondary-300 dark:hover:bg-secondary-800'
                  }`}
                >
                  <div className={`mr-3 ${isActive ? 'text-primary-600 dark:text-primary-400' : 'text-secondary-400 group-hover:text-secondary-600 dark:text-secondary-500 dark:group-hover:text-secondary-300'}`}>
                    {item.icon}
                  </div>
                  {item.name}
                </Link>
              );
            })}
          </div>
        </nav>
      </div>
    </>
  );
};

export default Sidebar;

==================================================
File: src/components/forms/BudgetAssignmentForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { BudgetAssignment, BudgetAssignmentInput, BudgetAssignmentService } from '../../services/budgetAssignment.service';

interface BudgetAssignmentFormProps {
  id?: string;
  onSuccess?: () => void;
}

const BudgetAssignmentForm: React.FC<BudgetAssignmentFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<BudgetAssignmentInput>({
    assignment_id: 0,
    budgetId: 0,
    userId: 0,
    roleInBudget: '',
    createdAt: '',
    updatedAt: '',
    budget: '',
    user: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await BudgetAssignmentService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.budgetId) {
        setError('El campo budgetId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.userId) {
        setError('El campo userId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.roleInBudget) {
        setError('El campo roleInBudget es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.budget) {
        setError('El campo budget es requerido');
        setLoading(false);
        return;
      }
      if (!formData.user) {
        setError('El campo user es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await BudgetAssignmentService.update(id, formData);
      } else {
        // Crear nuevo registro
        await BudgetAssignmentService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          assignment_id: 0,
          budgetId: 0,
          userId: 0,
          roleInBudget: '',
          createdAt: '',
          updatedAt: '',
          budget: '',
          user: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} BudgetAssignment</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="assignment_id" className="block text-sm font-medium text-gray-700">Assignment_id</label>
          <input
            type="number"
            id="assignment_id"
            name="assignment_id"
            value={formData.assignment_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="budgetId" className="block text-sm font-medium text-gray-700">BudgetId</label>
          <input
            type="number"
            id="budgetId"
            name="budgetId"
            value={formData.budgetId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="userId" className="block text-sm font-medium text-gray-700">UserId</label>
          <input
            type="number"
            id="userId"
            name="userId"
            value={formData.userId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="roleInBudget" className="block text-sm font-medium text-gray-700">RoleInBudget</label>
          <input
            type="text"
            id="roleInBudget"
            name="roleInBudget"
            value={formData.roleInBudget || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="budget" className="block text-sm font-medium text-gray-700">Budget</label>
          <input
            type="text"
            id="budget"
            name="budget"
            value={formData.budget || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="user" className="block text-sm font-medium text-gray-700">User</label>
          <input
            type="text"
            id="user"
            name="user"
            value={formData.user || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default BudgetAssignmentForm;


==================================================
File: src/components/forms/BudgetForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { Budget, BudgetInput, BudgetService } from '../../services/budget.service';

interface BudgetFormProps {
  id?: string;
  onSuccess?: () => void;
}

const BudgetForm: React.FC<BudgetFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<BudgetInput>({
    budget_id: 0,
    projectId: 0,
    code: '',
    obraName: '',
    owner: '',
    baseDate: '',
    status: '',
    responsibleUserId: 0,
    createdAt: '',
    updatedAt: '',
    project: '',
    responsibleUser: '',
    titles: '',
    items: '',
    assignments: '',
    generalExpenses: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await BudgetService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.baseDate instanceof Date) {
        formattedData.baseDate = new Date(formattedData.baseDate).toISOString().substring(0, 10);
      }
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.projectId) {
        setError('El campo projectId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.code) {
        setError('El campo code es requerido');
        setLoading(false);
        return;
      }
      if (!formData.obraName) {
        setError('El campo obraName es requerido');
        setLoading(false);
        return;
      }
      if (!formData.owner) {
        setError('El campo owner es requerido');
        setLoading(false);
        return;
      }
      if (!formData.baseDate) {
        setError('El campo baseDate es requerido');
        setLoading(false);
        return;
      }
      if (!formData.status) {
        setError('El campo status es requerido');
        setLoading(false);
        return;
      }
      if (!formData.responsibleUserId) {
        setError('El campo responsibleUserId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.project) {
        setError('El campo project es requerido');
        setLoading(false);
        return;
      }
      if (!formData.responsibleUser) {
        setError('El campo responsibleUser es requerido');
        setLoading(false);
        return;
      }
      if (!formData.titles) {
        setError('El campo titles es requerido');
        setLoading(false);
        return;
      }
      if (!formData.items) {
        setError('El campo items es requerido');
        setLoading(false);
        return;
      }
      if (!formData.assignments) {
        setError('El campo assignments es requerido');
        setLoading(false);
        return;
      }
      if (!formData.generalExpenses) {
        setError('El campo generalExpenses es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await BudgetService.update(id, formData);
      } else {
        // Crear nuevo registro
        await BudgetService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          budget_id: 0,
          projectId: 0,
          code: '',
          obraName: '',
          owner: '',
          baseDate: '',
          status: '',
          responsibleUserId: 0,
          createdAt: '',
          updatedAt: '',
          project: '',
          responsibleUser: '',
          titles: '',
          items: '',
          assignments: '',
          generalExpenses: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} Budget</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="budget_id" className="block text-sm font-medium text-gray-700">Budget_id</label>
          <input
            type="number"
            id="budget_id"
            name="budget_id"
            value={formData.budget_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="projectId" className="block text-sm font-medium text-gray-700">ProjectId</label>
          <input
            type="number"
            id="projectId"
            name="projectId"
            value={formData.projectId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="code" className="block text-sm font-medium text-gray-700">Code</label>
          <input
            type="text"
            id="code"
            name="code"
            value={formData.code || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="obraName" className="block text-sm font-medium text-gray-700">ObraName</label>
          <input
            type="text"
            id="obraName"
            name="obraName"
            value={formData.obraName || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="owner" className="block text-sm font-medium text-gray-700">Owner</label>
          <input
            type="text"
            id="owner"
            name="owner"
            value={formData.owner || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="baseDate" className="block text-sm font-medium text-gray-700">BaseDate</label>
          <input
            type="date"
            id="baseDate"
            name="baseDate"
            value={formData.baseDate || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="status" className="block text-sm font-medium text-gray-700">Status</label>
          <input
            type="text"
            id="status"
            name="status"
            value={formData.status || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="responsibleUserId" className="block text-sm font-medium text-gray-700">ResponsibleUserId</label>
          <input
            type="number"
            id="responsibleUserId"
            name="responsibleUserId"
            value={formData.responsibleUserId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="project" className="block text-sm font-medium text-gray-700">Project</label>
          <input
            type="text"
            id="project"
            name="project"
            value={formData.project || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="responsibleUser" className="block text-sm font-medium text-gray-700">ResponsibleUser</label>
          <input
            type="text"
            id="responsibleUser"
            name="responsibleUser"
            value={formData.responsibleUser || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="titles" className="block text-sm font-medium text-gray-700">Titles</label>
          <input
            type="text"
            id="titles"
            name="titles"
            value={formData.titles || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="items" className="block text-sm font-medium text-gray-700">Items</label>
          <input
            type="text"
            id="items"
            name="items"
            value={formData.items || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="assignments" className="block text-sm font-medium text-gray-700">Assignments</label>
          <input
            type="text"
            id="assignments"
            name="assignments"
            value={formData.assignments || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="generalExpenses" className="block text-sm font-medium text-gray-700">GeneralExpenses</label>
          <input
            type="text"
            id="generalExpenses"
            name="generalExpenses"
            value={formData.generalExpenses || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default BudgetForm;


==================================================
File: src/components/forms/BudgetItemForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { BudgetItem, BudgetItemInput, BudgetItemService } from '../../services/budgetItem.service';

interface BudgetItemFormProps {
  id?: string;
  onSuccess?: () => void;
}

const BudgetItemForm: React.FC<BudgetItemFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<BudgetItemInput>({
    item_id: 0,
    budgetId: 0,
    titleId: 0,
    subtitleId: 0,
    code: '',
    description: '',
    quantity: '',
    unit: '',
    unitPrice: '',
    metradoTotal: '',
    formula: '',
    materialsCost: '',
    laborCost: '',
    equipmentCost: '',
    incidencePercentage: '',
    createdAt: '',
    updatedAt: '',
    budget: '',
    title: '',
    subtitle: '',
    measurements: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await BudgetItemService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.budgetId) {
        setError('El campo budgetId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.titleId) {
        setError('El campo titleId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.code) {
        setError('El campo code es requerido');
        setLoading(false);
        return;
      }
      if (!formData.unit) {
        setError('El campo unit es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.budget) {
        setError('El campo budget es requerido');
        setLoading(false);
        return;
      }
      if (!formData.title) {
        setError('El campo title es requerido');
        setLoading(false);
        return;
      }
      if (!formData.measurements) {
        setError('El campo measurements es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await BudgetItemService.update(id, formData);
      } else {
        // Crear nuevo registro
        await BudgetItemService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          item_id: 0,
          budgetId: 0,
          titleId: 0,
          subtitleId: 0,
          code: '',
          description: '',
          quantity: '',
          unit: '',
          unitPrice: '',
          metradoTotal: '',
          formula: '',
          materialsCost: '',
          laborCost: '',
          equipmentCost: '',
          incidencePercentage: '',
          createdAt: '',
          updatedAt: '',
          budget: '',
          title: '',
          subtitle: '',
          measurements: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} BudgetItem</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="item_id" className="block text-sm font-medium text-gray-700">Item_id</label>
          <input
            type="number"
            id="item_id"
            name="item_id"
            value={formData.item_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="budgetId" className="block text-sm font-medium text-gray-700">BudgetId</label>
          <input
            type="number"
            id="budgetId"
            name="budgetId"
            value={formData.budgetId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="titleId" className="block text-sm font-medium text-gray-700">TitleId</label>
          <input
            type="number"
            id="titleId"
            name="titleId"
            value={formData.titleId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="subtitleId" className="block text-sm font-medium text-gray-700">SubtitleId</label>
          <input
            type="number"
            id="subtitleId"
            name="subtitleId"
            value={formData.subtitleId ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="code" className="block text-sm font-medium text-gray-700">Code</label>
          <input
            type="text"
            id="code"
            name="code"
            value={formData.code || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="description" className="block text-sm font-medium text-gray-700">Description</label>
          <input
            type="text"
            id="description"
            name="description"
            value={formData.description || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="quantity" className="block text-sm font-medium text-gray-700">Quantity</label>
          <input
            type="text"
            id="quantity"
            name="quantity"
            value={formData.quantity || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="unit" className="block text-sm font-medium text-gray-700">Unit</label>
          <input
            type="text"
            id="unit"
            name="unit"
            value={formData.unit || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="unitPrice" className="block text-sm font-medium text-gray-700">UnitPrice</label>
          <input
            type="text"
            id="unitPrice"
            name="unitPrice"
            value={formData.unitPrice || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="metradoTotal" className="block text-sm font-medium text-gray-700">MetradoTotal</label>
          <input
            type="text"
            id="metradoTotal"
            name="metradoTotal"
            value={formData.metradoTotal || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="formula" className="block text-sm font-medium text-gray-700">Formula</label>
          <input
            type="text"
            id="formula"
            name="formula"
            value={formData.formula || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="materialsCost" className="block text-sm font-medium text-gray-700">MaterialsCost</label>
          <input
            type="text"
            id="materialsCost"
            name="materialsCost"
            value={formData.materialsCost || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="laborCost" className="block text-sm font-medium text-gray-700">LaborCost</label>
          <input
            type="text"
            id="laborCost"
            name="laborCost"
            value={formData.laborCost || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="equipmentCost" className="block text-sm font-medium text-gray-700">EquipmentCost</label>
          <input
            type="text"
            id="equipmentCost"
            name="equipmentCost"
            value={formData.equipmentCost || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="incidencePercentage" className="block text-sm font-medium text-gray-700">IncidencePercentage</label>
          <input
            type="text"
            id="incidencePercentage"
            name="incidencePercentage"
            value={formData.incidencePercentage || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="budget" className="block text-sm font-medium text-gray-700">Budget</label>
          <input
            type="text"
            id="budget"
            name="budget"
            value={formData.budget || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="title" className="block text-sm font-medium text-gray-700">Title</label>
          <input
            type="text"
            id="title"
            name="title"
            value={formData.title || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="subtitle" className="block text-sm font-medium text-gray-700">Subtitle</label>
          <input
            type="text"
            id="subtitle"
            name="subtitle"
            value={formData.subtitle || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="measurements" className="block text-sm font-medium text-gray-700">Measurements</label>
          <input
            type="text"
            id="measurements"
            name="measurements"
            value={formData.measurements || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default BudgetItemForm;


==================================================
File: src/components/forms/BudgetMeasurementForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { BudgetMeasurement, BudgetMeasurementInput, BudgetMeasurementService } from '../../services/budgetMeasurement.service';

interface BudgetMeasurementFormProps {
  id?: string;
  onSuccess?: () => void;
}

const BudgetMeasurementForm: React.FC<BudgetMeasurementFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<BudgetMeasurementInput>({
    measurement_id: 0,
    itemId: 0,
    productionUnit: '',
    quantity: '',
    metradoValue: '',
    createdAt: '',
    updatedAt: '',
    item: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await BudgetMeasurementService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.itemId) {
        setError('El campo itemId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.productionUnit) {
        setError('El campo productionUnit es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.item) {
        setError('El campo item es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await BudgetMeasurementService.update(id, formData);
      } else {
        // Crear nuevo registro
        await BudgetMeasurementService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          measurement_id: 0,
          itemId: 0,
          productionUnit: '',
          quantity: '',
          metradoValue: '',
          createdAt: '',
          updatedAt: '',
          item: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} BudgetMeasurement</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="measurement_id" className="block text-sm font-medium text-gray-700">Measurement_id</label>
          <input
            type="number"
            id="measurement_id"
            name="measurement_id"
            value={formData.measurement_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="itemId" className="block text-sm font-medium text-gray-700">ItemId</label>
          <input
            type="number"
            id="itemId"
            name="itemId"
            value={formData.itemId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="productionUnit" className="block text-sm font-medium text-gray-700">ProductionUnit</label>
          <input
            type="text"
            id="productionUnit"
            name="productionUnit"
            value={formData.productionUnit || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="quantity" className="block text-sm font-medium text-gray-700">Quantity</label>
          <input
            type="text"
            id="quantity"
            name="quantity"
            value={formData.quantity || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="metradoValue" className="block text-sm font-medium text-gray-700">MetradoValue</label>
          <input
            type="text"
            id="metradoValue"
            name="metradoValue"
            value={formData.metradoValue || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="item" className="block text-sm font-medium text-gray-700">Item</label>
          <input
            type="text"
            id="item"
            name="item"
            value={formData.item || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default BudgetMeasurementForm;


==================================================
File: src/components/forms/BudgetSubtitleForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { BudgetSubtitle, BudgetSubtitleInput, BudgetSubtitleService } from '../../services/budgetSubtitle.service';

interface BudgetSubtitleFormProps {
  id?: string;
  onSuccess?: () => void;
}

const BudgetSubtitleForm: React.FC<BudgetSubtitleFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<BudgetSubtitleInput>({
    subtitle_id: 0,
    titleId: 0,
    name: '',
    orderIndex: 0,
    createdAt: '',
    updatedAt: '',
    title: '',
    items: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await BudgetSubtitleService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.titleId) {
        setError('El campo titleId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.name) {
        setError('El campo name es requerido');
        setLoading(false);
        return;
      }
      if (!formData.orderIndex) {
        setError('El campo orderIndex es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.title) {
        setError('El campo title es requerido');
        setLoading(false);
        return;
      }
      if (!formData.items) {
        setError('El campo items es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await BudgetSubtitleService.update(id, formData);
      } else {
        // Crear nuevo registro
        await BudgetSubtitleService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          subtitle_id: 0,
          titleId: 0,
          name: '',
          orderIndex: 0,
          createdAt: '',
          updatedAt: '',
          title: '',
          items: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} BudgetSubtitle</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="subtitle_id" className="block text-sm font-medium text-gray-700">Subtitle_id</label>
          <input
            type="number"
            id="subtitle_id"
            name="subtitle_id"
            value={formData.subtitle_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="titleId" className="block text-sm font-medium text-gray-700">TitleId</label>
          <input
            type="number"
            id="titleId"
            name="titleId"
            value={formData.titleId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="name" className="block text-sm font-medium text-gray-700">Name</label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="orderIndex" className="block text-sm font-medium text-gray-700">OrderIndex</label>
          <input
            type="number"
            id="orderIndex"
            name="orderIndex"
            value={formData.orderIndex ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="title" className="block text-sm font-medium text-gray-700">Title</label>
          <input
            type="text"
            id="title"
            name="title"
            value={formData.title || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="items" className="block text-sm font-medium text-gray-700">Items</label>
          <input
            type="text"
            id="items"
            name="items"
            value={formData.items || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default BudgetSubtitleForm;


==================================================
File: src/components/forms/BudgetTitleForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { BudgetTitle, BudgetTitleInput, BudgetTitleService } from '../../services/budgetTitle.service';

interface BudgetTitleFormProps {
  id?: string;
  onSuccess?: () => void;
}

const BudgetTitleForm: React.FC<BudgetTitleFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<BudgetTitleInput>({
    title_id: 0,
    budgetId: 0,
    name: '',
    orderIndex: 0,
    createdAt: '',
    updatedAt: '',
    budget: '',
    subtitles: '',
    items: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await BudgetTitleService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.budgetId) {
        setError('El campo budgetId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.name) {
        setError('El campo name es requerido');
        setLoading(false);
        return;
      }
      if (!formData.orderIndex) {
        setError('El campo orderIndex es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.budget) {
        setError('El campo budget es requerido');
        setLoading(false);
        return;
      }
      if (!formData.subtitles) {
        setError('El campo subtitles es requerido');
        setLoading(false);
        return;
      }
      if (!formData.items) {
        setError('El campo items es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await BudgetTitleService.update(id, formData);
      } else {
        // Crear nuevo registro
        await BudgetTitleService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          title_id: 0,
          budgetId: 0,
          name: '',
          orderIndex: 0,
          createdAt: '',
          updatedAt: '',
          budget: '',
          subtitles: '',
          items: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} BudgetTitle</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="title_id" className="block text-sm font-medium text-gray-700">Title_id</label>
          <input
            type="number"
            id="title_id"
            name="title_id"
            value={formData.title_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="budgetId" className="block text-sm font-medium text-gray-700">BudgetId</label>
          <input
            type="number"
            id="budgetId"
            name="budgetId"
            value={formData.budgetId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="name" className="block text-sm font-medium text-gray-700">Name</label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="orderIndex" className="block text-sm font-medium text-gray-700">OrderIndex</label>
          <input
            type="number"
            id="orderIndex"
            name="orderIndex"
            value={formData.orderIndex ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="budget" className="block text-sm font-medium text-gray-700">Budget</label>
          <input
            type="text"
            id="budget"
            name="budget"
            value={formData.budget || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="subtitles" className="block text-sm font-medium text-gray-700">Subtitles</label>
          <input
            type="text"
            id="subtitles"
            name="subtitles"
            value={formData.subtitles || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="items" className="block text-sm font-medium text-gray-700">Items</label>
          <input
            type="text"
            id="items"
            name="items"
            value={formData.items || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default BudgetTitleForm;


==================================================
File: src/components/forms/ClientForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { Client, ClientInput, ClientService } from '../../services/client.service';

interface ClientFormProps {
  id?: string;
  onSuccess?: () => void;
}

const ClientForm: React.FC<ClientFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<ClientInput>({
    client_id: 0,
    name: '',
    logoUrl: '',
    colorScheme: '',
    createdAt: '',
    updatedAt: '',
    projects: '',
    users: '',
    configurations: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await ClientService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.name) {
        setError('El campo name es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.projects) {
        setError('El campo projects es requerido');
        setLoading(false);
        return;
      }
      if (!formData.users) {
        setError('El campo users es requerido');
        setLoading(false);
        return;
      }
      if (!formData.configurations) {
        setError('El campo configurations es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await ClientService.update(id, formData);
      } else {
        // Crear nuevo registro
        await ClientService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          client_id: 0,
          name: '',
          logoUrl: '',
          colorScheme: '',
          createdAt: '',
          updatedAt: '',
          projects: '',
          users: '',
          configurations: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} Client</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="client_id" className="block text-sm font-medium text-gray-700">Client_id</label>
          <input
            type="number"
            id="client_id"
            name="client_id"
            value={formData.client_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="name" className="block text-sm font-medium text-gray-700">Name</label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="logoUrl" className="block text-sm font-medium text-gray-700">LogoUrl</label>
          <input
            type="text"
            id="logoUrl"
            name="logoUrl"
            value={formData.logoUrl || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="colorScheme" className="block text-sm font-medium text-gray-700">ColorScheme</label>
          <input
            type="text"
            id="colorScheme"
            name="colorScheme"
            value={formData.colorScheme || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="projects" className="block text-sm font-medium text-gray-700">Projects</label>
          <input
            type="text"
            id="projects"
            name="projects"
            value={formData.projects || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="users" className="block text-sm font-medium text-gray-700">Users</label>
          <input
            type="text"
            id="users"
            name="users"
            value={formData.users || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="configurations" className="block text-sm font-medium text-gray-700">Configurations</label>
          <input
            type="text"
            id="configurations"
            name="configurations"
            value={formData.configurations || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default ClientForm;


==================================================
File: src/components/forms/ConfigurationForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { Configuration, ConfigurationInput, ConfigurationService } from '../../services/configuration.service';

interface ConfigurationFormProps {
  id?: string;
  onSuccess?: () => void;
}

const ConfigurationForm: React.FC<ConfigurationFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<ConfigurationInput>({
    configuration_id: 0,
    clientId: 0,
    settingKey: '',
    settingValue: '',
    createdAt: '',
    updatedAt: '',
    client: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await ConfigurationService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.clientId) {
        setError('El campo clientId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.settingKey) {
        setError('El campo settingKey es requerido');
        setLoading(false);
        return;
      }
      if (!formData.settingValue) {
        setError('El campo settingValue es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.client) {
        setError('El campo client es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await ConfigurationService.update(id, formData);
      } else {
        // Crear nuevo registro
        await ConfigurationService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          configuration_id: 0,
          clientId: 0,
          settingKey: '',
          settingValue: '',
          createdAt: '',
          updatedAt: '',
          client: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} Configuration</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="configuration_id" className="block text-sm font-medium text-gray-700">Configuration_id</label>
          <input
            type="number"
            id="configuration_id"
            name="configuration_id"
            value={formData.configuration_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="clientId" className="block text-sm font-medium text-gray-700">ClientId</label>
          <input
            type="number"
            id="clientId"
            name="clientId"
            value={formData.clientId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="settingKey" className="block text-sm font-medium text-gray-700">SettingKey</label>
          <input
            type="text"
            id="settingKey"
            name="settingKey"
            value={formData.settingKey || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="settingValue" className="block text-sm font-medium text-gray-700">SettingValue</label>
          <input
            type="text"
            id="settingValue"
            name="settingValue"
            value={formData.settingValue || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="client" className="block text-sm font-medium text-gray-700">Client</label>
          <input
            type="text"
            id="client"
            name="client"
            value={formData.client || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default ConfigurationForm;


==================================================
File: src/components/forms/GeneralExpenseForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { GeneralExpense, GeneralExpenseInput, GeneralExpenseService } from '../../services/generalExpense.service';

interface GeneralExpenseFormProps {
  id?: string;
  onSuccess?: () => void;
}

const GeneralExpenseForm: React.FC<GeneralExpenseFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<GeneralExpenseInput>({
    expense_id: 0,
    budgetId: 0,
    description: '',
    percentage: '',
    amount: '',
    createdAt: '',
    updatedAt: '',
    budget: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await GeneralExpenseService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.budgetId) {
        setError('El campo budgetId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.description) {
        setError('El campo description es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.budget) {
        setError('El campo budget es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await GeneralExpenseService.update(id, formData);
      } else {
        // Crear nuevo registro
        await GeneralExpenseService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          expense_id: 0,
          budgetId: 0,
          description: '',
          percentage: '',
          amount: '',
          createdAt: '',
          updatedAt: '',
          budget: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} GeneralExpense</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="expense_id" className="block text-sm font-medium text-gray-700">Expense_id</label>
          <input
            type="number"
            id="expense_id"
            name="expense_id"
            value={formData.expense_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="budgetId" className="block text-sm font-medium text-gray-700">BudgetId</label>
          <input
            type="number"
            id="budgetId"
            name="budgetId"
            value={formData.budgetId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="description" className="block text-sm font-medium text-gray-700">Description</label>
          <input
            type="text"
            id="description"
            name="description"
            value={formData.description || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="percentage" className="block text-sm font-medium text-gray-700">Percentage</label>
          <input
            type="text"
            id="percentage"
            name="percentage"
            value={formData.percentage || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="amount" className="block text-sm font-medium text-gray-700">Amount</label>
          <input
            type="text"
            id="amount"
            name="amount"
            value={formData.amount || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="budget" className="block text-sm font-medium text-gray-700">Budget</label>
          <input
            type="text"
            id="budget"
            name="budget"
            value={formData.budget || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default GeneralExpenseForm;


==================================================
File: src/components/forms/PriceCardForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { PriceCard, PriceCardInput, PriceCardService } from '../../services/priceCard.service';

interface PriceCardFormProps {
  id?: string;
  onSuccess?: () => void;
}

const PriceCardForm: React.FC<PriceCardFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<PriceCardInput>({
    price_card_id: 0,
    resourceId: 0,
    provider: '',
    price: '',
    contractType: '',
    effectiveDate: '',
    createdAt: '',
    updatedAt: '',
    resource: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await PriceCardService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.effectiveDate instanceof Date) {
        formattedData.effectiveDate = new Date(formattedData.effectiveDate).toISOString().substring(0, 10);
      }
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.resourceId) {
        setError('El campo resourceId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.provider) {
        setError('El campo provider es requerido');
        setLoading(false);
        return;
      }
      if (!formData.contractType) {
        setError('El campo contractType es requerido');
        setLoading(false);
        return;
      }
      if (!formData.effectiveDate) {
        setError('El campo effectiveDate es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.resource) {
        setError('El campo resource es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await PriceCardService.update(id, formData);
      } else {
        // Crear nuevo registro
        await PriceCardService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          price_card_id: 0,
          resourceId: 0,
          provider: '',
          price: '',
          contractType: '',
          effectiveDate: '',
          createdAt: '',
          updatedAt: '',
          resource: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} PriceCard</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="price_card_id" className="block text-sm font-medium text-gray-700">Price_card_id</label>
          <input
            type="number"
            id="price_card_id"
            name="price_card_id"
            value={formData.price_card_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="resourceId" className="block text-sm font-medium text-gray-700">ResourceId</label>
          <input
            type="number"
            id="resourceId"
            name="resourceId"
            value={formData.resourceId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="provider" className="block text-sm font-medium text-gray-700">Provider</label>
          <input
            type="text"
            id="provider"
            name="provider"
            value={formData.provider || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="price" className="block text-sm font-medium text-gray-700">Price</label>
          <input
            type="text"
            id="price"
            name="price"
            value={formData.price || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="contractType" className="block text-sm font-medium text-gray-700">ContractType</label>
          <input
            type="text"
            id="contractType"
            name="contractType"
            value={formData.contractType || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="effectiveDate" className="block text-sm font-medium text-gray-700">EffectiveDate</label>
          <input
            type="date"
            id="effectiveDate"
            name="effectiveDate"
            value={formData.effectiveDate || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="resource" className="block text-sm font-medium text-gray-700">Resource</label>
          <input
            type="text"
            id="resource"
            name="resource"
            value={formData.resource || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default PriceCardForm;


==================================================
File: src/components/forms/ProjectForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { Project, ProjectInput, ProjectService } from '../../services/project.service';

interface ProjectFormProps {
  id?: string;
  onSuccess?: () => void;
}

const ProjectForm: React.FC<ProjectFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<ProjectInput>({
    project_id: 0,
    clientId: 0,
    name: '',
    description: '',
    location: '',
    startDate: '',
    endDate: '',
    createdAt: '',
    updatedAt: '',
    client: '',
    budgets: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await ProjectService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.startDate instanceof Date) {
        formattedData.startDate = new Date(formattedData.startDate).toISOString().substring(0, 10);
      }
      if (formattedData.endDate instanceof Date) {
        formattedData.endDate = new Date(formattedData.endDate).toISOString().substring(0, 10);
      }
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.clientId) {
        setError('El campo clientId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.name) {
        setError('El campo name es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.client) {
        setError('El campo client es requerido');
        setLoading(false);
        return;
      }
      if (!formData.budgets) {
        setError('El campo budgets es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await ProjectService.update(id, formData);
      } else {
        // Crear nuevo registro
        await ProjectService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          project_id: 0,
          clientId: 0,
          name: '',
          description: '',
          location: '',
          startDate: '',
          endDate: '',
          createdAt: '',
          updatedAt: '',
          client: '',
          budgets: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} Project</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="project_id" className="block text-sm font-medium text-gray-700">Project_id</label>
          <input
            type="number"
            id="project_id"
            name="project_id"
            value={formData.project_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="clientId" className="block text-sm font-medium text-gray-700">ClientId</label>
          <input
            type="number"
            id="clientId"
            name="clientId"
            value={formData.clientId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="name" className="block text-sm font-medium text-gray-700">Name</label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="description" className="block text-sm font-medium text-gray-700">Description</label>
          <input
            type="text"
            id="description"
            name="description"
            value={formData.description || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="location" className="block text-sm font-medium text-gray-700">Location</label>
          <input
            type="text"
            id="location"
            name="location"
            value={formData.location || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="startDate" className="block text-sm font-medium text-gray-700">StartDate</label>
          <input
            type="date"
            id="startDate"
            name="startDate"
            value={formData.startDate || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="endDate" className="block text-sm font-medium text-gray-700">EndDate</label>
          <input
            type="date"
            id="endDate"
            name="endDate"
            value={formData.endDate || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="client" className="block text-sm font-medium text-gray-700">Client</label>
          <input
            type="text"
            id="client"
            name="client"
            value={formData.client || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="budgets" className="block text-sm font-medium text-gray-700">Budgets</label>
          <input
            type="text"
            id="budgets"
            name="budgets"
            value={formData.budgets || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default ProjectForm;


==================================================
File: src/components/forms/ResourceFamilyForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { ResourceFamily, ResourceFamilyInput, ResourceFamilyService } from '../../services/resourceFamily.service';

interface ResourceFamilyFormProps {
  id?: string;
  onSuccess?: () => void;
}

const ResourceFamilyForm: React.FC<ResourceFamilyFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<ResourceFamilyInput>({
    family_id: 0,
    name: '',
    description: '',
    createdAt: '',
    updatedAt: '',
    resources: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await ResourceFamilyService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.name) {
        setError('El campo name es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.resources) {
        setError('El campo resources es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await ResourceFamilyService.update(id, formData);
      } else {
        // Crear nuevo registro
        await ResourceFamilyService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          family_id: 0,
          name: '',
          description: '',
          createdAt: '',
          updatedAt: '',
          resources: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} ResourceFamily</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="family_id" className="block text-sm font-medium text-gray-700">Family_id</label>
          <input
            type="number"
            id="family_id"
            name="family_id"
            value={formData.family_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="name" className="block text-sm font-medium text-gray-700">Name</label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="description" className="block text-sm font-medium text-gray-700">Description</label>
          <input
            type="text"
            id="description"
            name="description"
            value={formData.description || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="resources" className="block text-sm font-medium text-gray-700">Resources</label>
          <input
            type="text"
            id="resources"
            name="resources"
            value={formData.resources || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default ResourceFamilyForm;


==================================================
File: src/components/forms/ResourceForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { Resource, ResourceInput, ResourceService } from '../../services/resource.service';

interface ResourceFormProps {
  id?: string;
  onSuccess?: () => void;
}

const ResourceForm: React.FC<ResourceFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<ResourceInput>({
    resource_id: 0,
    familyId: 0,
    name: '',
    description: '',
    createdAt: '',
    updatedAt: '',
    family: '',
    priceCards: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await ResourceService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.familyId) {
        setError('El campo familyId es requerido');
        setLoading(false);
        return;
      }
      if (!formData.name) {
        setError('El campo name es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.family) {
        setError('El campo family es requerido');
        setLoading(false);
        return;
      }
      if (!formData.priceCards) {
        setError('El campo priceCards es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await ResourceService.update(id, formData);
      } else {
        // Crear nuevo registro
        await ResourceService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          resource_id: 0,
          familyId: 0,
          name: '',
          description: '',
          createdAt: '',
          updatedAt: '',
          family: '',
          priceCards: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} Resource</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="resource_id" className="block text-sm font-medium text-gray-700">Resource_id</label>
          <input
            type="number"
            id="resource_id"
            name="resource_id"
            value={formData.resource_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="familyId" className="block text-sm font-medium text-gray-700">FamilyId</label>
          <input
            type="number"
            id="familyId"
            name="familyId"
            value={formData.familyId ?? ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="name" className="block text-sm font-medium text-gray-700">Name</label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="description" className="block text-sm font-medium text-gray-700">Description</label>
          <input
            type="text"
            id="description"
            name="description"
            value={formData.description || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="family" className="block text-sm font-medium text-gray-700">Family</label>
          <input
            type="text"
            id="family"
            name="family"
            value={formData.family || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="priceCards" className="block text-sm font-medium text-gray-700">PriceCards</label>
          <input
            type="text"
            id="priceCards"
            name="priceCards"
            value={formData.priceCards || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default ResourceForm;


==================================================
File: src/components/forms/UserForm.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { User, UserInput, UserService } from '../../services/user.service';

interface UserFormProps {
  id?: string;
  onSuccess?: () => void;
}

const UserForm: React.FC<UserFormProps> = ({ id, onSuccess }) => {
  const [formData, setFormData] = useState<UserInput>({
    user_id: 0,
    clientId: 0,
    name: '',
    email: '',
    passwordHash: '',
    role: '',
    createdAt: '',
    updatedAt: '',
    client: '',
    budgets: '',
    assignments: ''
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await UserService.getById(id!);
      
      // Convierte las fechas a formato ISO string para los campos de fecha
      const formattedData = { ...data };
      
      if (formattedData.createdAt instanceof Date) {
        formattedData.createdAt = new Date(formattedData.createdAt).toISOString().substring(0, 10);
      }
      if (formattedData.updatedAt instanceof Date) {
        formattedData.updatedAt = new Date(formattedData.updatedAt).toISOString().substring(0, 10);
      }
      
      setFormData(formattedData);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    // Conversión de tipos según el campo
    let convertedValue: any = value;
    
    if (type === 'number') {
      convertedValue = value === '' ? '' : Number(value);
    } else if (type === 'checkbox') {
      convertedValue = (e.target as HTMLInputElement).checked;
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: convertedValue
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Validar campos requeridos
      if (!formData.name) {
        setError('El campo name es requerido');
        setLoading(false);
        return;
      }
      if (!formData.email) {
        setError('El campo email es requerido');
        setLoading(false);
        return;
      }
      if (!formData.passwordHash) {
        setError('El campo passwordHash es requerido');
        setLoading(false);
        return;
      }
      if (!formData.role) {
        setError('El campo role es requerido');
        setLoading(false);
        return;
      }
      if (!formData.updatedAt) {
        setError('El campo updatedAt es requerido');
        setLoading(false);
        return;
      }
      if (!formData.budgets) {
        setError('El campo budgets es requerido');
        setLoading(false);
        return;
      }
      if (!formData.assignments) {
        setError('El campo assignments es requerido');
        setLoading(false);
        return;
      }
      
      if (id) {
        // Actualizar registro existente
        await UserService.update(id, formData);
      } else {
        // Crear nuevo registro
        await UserService.create(formData);
      }
      
      // Limpiar formulario si es nuevo registro
      if (!id) {
        setFormData({
          user_id: 0,
          clientId: 0,
          name: '',
          email: '',
          passwordHash: '',
          role: '',
          createdAt: '',
          updatedAt: '',
          client: '',
          budgets: '',
          assignments: ''
        });
      }
      
      // Ejecutar callback de éxito si existe
      if (onSuccess) {
        onSuccess();
      }
    } catch (err) {
      setError('Error al guardar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading && id) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="max-w-lg mx-auto p-4">
      <h2 className="text-xl font-bold mb-4">{id ? 'Editar' : 'Crear'} User</h2>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="user_id" className="block text-sm font-medium text-gray-700">User_id</label>
          <input
            type="number"
            id="user_id"
            name="user_id"
            value={formData.user_id ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="clientId" className="block text-sm font-medium text-gray-700">ClientId</label>
          <input
            type="number"
            id="clientId"
            name="clientId"
            value={formData.clientId ?? ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="name" className="block text-sm font-medium text-gray-700">Name</label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="email" className="block text-sm font-medium text-gray-700">Email</label>
          <input
            type="text"
            id="email"
            name="email"
            value={formData.email || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="passwordHash" className="block text-sm font-medium text-gray-700">PasswordHash</label>
          <input
            type="text"
            id="passwordHash"
            name="passwordHash"
            value={formData.passwordHash || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="role" className="block text-sm font-medium text-gray-700">Role</label>
          <input
            type="text"
            id="role"
            name="role"
            value={formData.role || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="createdAt" className="block text-sm font-medium text-gray-700">CreatedAt</label>
          <input
            type="date"
            id="createdAt"
            name="createdAt"
            value={formData.createdAt || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="updatedAt" className="block text-sm font-medium text-gray-700">UpdatedAt</label>
          <input
            type="date"
            id="updatedAt"
            name="updatedAt"
            value={formData.updatedAt || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="client" className="block text-sm font-medium text-gray-700">Client</label>
          <input
            type="text"
            id="client"
            name="client"
            value={formData.client || ''}
            onChange={handleChange}
            required={false}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="budgets" className="block text-sm font-medium text-gray-700">Budgets</label>
          <input
            type="text"
            id="budgets"
            name="budgets"
            value={formData.budgets || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        <div>
          <label htmlFor="assignments" className="block text-sm font-medium text-gray-700">Assignments</label>
          <input
            type="text"
            id="assignments"
            name="assignments"
            value={formData.assignments || ''}
            onChange={handleChange}
            required={true}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            {loading ? 'Guardando...' : id ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default UserForm;


==================================================
File: src/components/layout/AppLayout.tsx
==================================================

import React from 'react';
import Sidebar from '../Sidebar';

interface AppLayoutProps {
  children: React.ReactNode;
}

const AppLayout: React.FC<AppLayoutProps> = ({ children }) => {
  return (
    <div className="h-screen flex overflow-hidden bg-secondary-100 dark:bg-secondary-900">
      {/* Sidebar */}
      <Sidebar />

      {/* Main Content */}
      <div className="flex-1 flex flex-col overflow-hidden lg:pl-64">
        {/* Top Header */}
        <header className="w-full h-16 bg-white dark:bg-secondary-800 shadow flex items-center justify-between px-6">
          <h1 className="text-xl font-semibold text-secondary-900 dark:text-white">
            Aplicación CRUD generada automáticamente
          </h1>
          <div className="flex items-center">
            {/* Add user profile, theme toggle, notifications, etc. here */}
          </div>
        </header>

        {/* Page Content */}
        <main className="flex-1 overflow-auto p-6">
          <div className="max-w-7xl mx-auto">
            <div className="bg-white dark:bg-secondary-800 rounded-lg shadow p-6">
              {children}
            </div>
          </div>
        </main>
      </div>
    </div>
  );
};

export default AppLayout;

==================================================
File: src/components/tables/BudgetAssignmentTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { BudgetAssignment, BudgetAssignmentService } from '../../services/budgetAssignment.service';

interface BudgetAssignmentTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const BudgetAssignmentTable: React.FC<BudgetAssignmentTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<BudgetAssignment[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await BudgetAssignmentService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await BudgetAssignmentService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              assignment_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              budgetId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              userId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              roleInBudget
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              budget
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              user
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.assignment_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.budgetId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.userId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.roleInBudget)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.budget)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.user)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default BudgetAssignmentTable;


==================================================
File: src/components/tables/BudgetItemTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { BudgetItem, BudgetItemService } from '../../services/budgetItem.service';

interface BudgetItemTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const BudgetItemTable: React.FC<BudgetItemTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<BudgetItem[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await BudgetItemService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await BudgetItemService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              item_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              budgetId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              titleId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              subtitleId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              code
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              description
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              quantity
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              unit
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              unitPrice
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              metradoTotal
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              formula
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              materialsCost
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              laborCost
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              equipmentCost
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              incidencePercentage
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              budget
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              title
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              subtitle
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              measurements
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.item_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.budgetId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.titleId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.subtitleId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.code)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.description)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.quantity)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.unit)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.unitPrice)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.metradoTotal)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.formula)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.materialsCost)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.laborCost)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.equipmentCost)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.incidencePercentage)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.budget)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.title)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.subtitle)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.measurements)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default BudgetItemTable;


==================================================
File: src/components/tables/BudgetMeasurementTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { BudgetMeasurement, BudgetMeasurementService } from '../../services/budgetMeasurement.service';

interface BudgetMeasurementTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const BudgetMeasurementTable: React.FC<BudgetMeasurementTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<BudgetMeasurement[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await BudgetMeasurementService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await BudgetMeasurementService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              measurement_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              itemId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              productionUnit
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              quantity
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              metradoValue
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              item
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.measurement_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.itemId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.productionUnit)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.quantity)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.metradoValue)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.item)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default BudgetMeasurementTable;


==================================================
File: src/components/tables/BudgetSubtitleTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { BudgetSubtitle, BudgetSubtitleService } from '../../services/budgetSubtitle.service';

interface BudgetSubtitleTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const BudgetSubtitleTable: React.FC<BudgetSubtitleTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<BudgetSubtitle[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await BudgetSubtitleService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await BudgetSubtitleService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              subtitle_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              titleId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              name
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              orderIndex
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              title
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              items
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.subtitle_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.titleId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.name)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.orderIndex)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.title)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.items)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default BudgetSubtitleTable;


==================================================
File: src/components/tables/BudgetTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { Budget, BudgetService } from '../../services/budget.service';

interface BudgetTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const BudgetTable: React.FC<BudgetTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<Budget[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await BudgetService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await BudgetService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              budget_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              projectId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              code
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              obraName
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              owner
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              baseDate
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              status
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              responsibleUserId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              project
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              responsibleUser
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              titles
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              items
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              assignments
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              generalExpenses
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.budget_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.projectId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.code)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.obraName)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.owner)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.baseDate)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.status)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.responsibleUserId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.project)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.responsibleUser)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.titles)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.items)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.assignments)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.generalExpenses)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default BudgetTable;


==================================================
File: src/components/tables/BudgetTitleTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { BudgetTitle, BudgetTitleService } from '../../services/budgetTitle.service';

interface BudgetTitleTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const BudgetTitleTable: React.FC<BudgetTitleTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<BudgetTitle[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await BudgetTitleService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await BudgetTitleService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              title_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              budgetId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              name
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              orderIndex
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              budget
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              subtitles
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              items
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.title_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.budgetId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.name)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.orderIndex)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.budget)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.subtitles)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.items)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default BudgetTitleTable;


==================================================
File: src/components/tables/ClientTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { Client, ClientService } from '../../services/client.service';

interface ClientTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const ClientTable: React.FC<ClientTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<Client[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await ClientService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await ClientService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              client_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              name
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              logoUrl
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              colorScheme
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              projects
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              users
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              configurations
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.client_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.name)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.logoUrl)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.colorScheme)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.projects)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.users)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.configurations)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ClientTable;


==================================================
File: src/components/tables/ConfigurationTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { Configuration, ConfigurationService } from '../../services/configuration.service';

interface ConfigurationTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const ConfigurationTable: React.FC<ConfigurationTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<Configuration[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await ConfigurationService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await ConfigurationService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              configuration_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              clientId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              settingKey
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              settingValue
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              client
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.configuration_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.clientId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.settingKey)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.settingValue)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.client)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ConfigurationTable;


==================================================
File: src/components/tables/GeneralExpenseTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { GeneralExpense, GeneralExpenseService } from '../../services/generalExpense.service';

interface GeneralExpenseTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const GeneralExpenseTable: React.FC<GeneralExpenseTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<GeneralExpense[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await GeneralExpenseService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await GeneralExpenseService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              expense_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              budgetId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              description
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              percentage
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              amount
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              budget
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.expense_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.budgetId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.description)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.percentage)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.amount)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.budget)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default GeneralExpenseTable;


==================================================
File: src/components/tables/PriceCardTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { PriceCard, PriceCardService } from '../../services/priceCard.service';

interface PriceCardTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const PriceCardTable: React.FC<PriceCardTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<PriceCard[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await PriceCardService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await PriceCardService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              price_card_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              resourceId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              provider
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              price
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              contractType
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              effectiveDate
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              resource
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.price_card_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.resourceId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.provider)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.price)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.contractType)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.effectiveDate)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.resource)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default PriceCardTable;


==================================================
File: src/components/tables/ProjectTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { Project, ProjectService } from '../../services/project.service';

interface ProjectTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const ProjectTable: React.FC<ProjectTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<Project[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await ProjectService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await ProjectService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              project_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              clientId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              name
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              description
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              location
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              startDate
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              endDate
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              client
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              budgets
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.project_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.clientId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.name)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.description)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.location)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.startDate)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.endDate)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.client)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.budgets)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ProjectTable;


==================================================
File: src/components/tables/ResourceFamilyTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { ResourceFamily, ResourceFamilyService } from '../../services/resourceFamily.service';

interface ResourceFamilyTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const ResourceFamilyTable: React.FC<ResourceFamilyTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<ResourceFamily[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await ResourceFamilyService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await ResourceFamilyService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              family_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              name
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              description
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              resources
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.family_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.name)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.description)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.resources)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ResourceFamilyTable;


==================================================
File: src/components/tables/ResourceTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { Resource, ResourceService } from '../../services/resource.service';

interface ResourceTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const ResourceTable: React.FC<ResourceTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<Resource[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await ResourceService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await ResourceService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              resource_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              familyId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              name
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              description
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              family
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              priceCards
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.resource_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.familyId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.name)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.description)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.family)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.priceCards)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ResourceTable;


==================================================
File: src/components/tables/UserTable.tsx
==================================================


import React, { useState, useEffect } from 'react';
import { User, UserService } from '../../services/user.service';

interface UserTableProps {
  onEdit?: (id: string) => void;
  onDelete?: () => void;
}

const UserTable: React.FC<UserTableProps> = ({ onEdit, onDelete }) => {
  const [data, setData] = useState<User[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const result = await UserService.getAll();
      setData(result);
      setError(null);
    } catch (err) {
      setError('Error al cargar los datos');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm('¿Estás seguro de que deseas eliminar este elemento?')) {
      try {
        await UserService.delete(id);
        
        // Recargar datos después de eliminar
        loadData();
        
        // Ejecutar callback si existe
        if (onDelete) {
          onDelete();
        }
      } catch (err) {
        setError('Error al eliminar el elemento');
        console.error(err);
      }
    }
  };

  if (loading && data.length === 0) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (data.length === 0) {
    return <div>No hay datos disponibles</div>;
  }

  // Formatear fecha para mostrar en la tabla
  const formatDate = (dateString: string | Date | undefined) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              user_id
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              clientId
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              name
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              email
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              passwordHash
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              role
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              createdAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              updatedAt
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              client
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              budgets
            </th>
            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              assignments
            </th>
            <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.map((item) => (
            <tr key={item?.id}>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.user_id)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.clientId)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.name)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.email)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.passwordHash)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.role)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.createdAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(item.updatedAt)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.client)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.budgets)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                {String(item.assignments)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  onClick={() => onEdit && onEdit(item.id)}
                  className="text-indigo-600 hover:text-indigo-900 mr-4"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleDelete(item.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Eliminar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default UserTable;


==================================================
File: src/index.css
==================================================

@tailwind base;
@tailwind components;
@tailwind utilities;
@layer base {
  html {
    font-size: 16px;
  }
  body {
    font-family: 'Inter', sans-serif;
    font-size: 1rem;
    line-height: 1.5;
    color: #333;
  }
}

==================================================
File: src/main.tsx
==================================================

import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import './index.css';

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>
);


==================================================
File: src/pages/BudgetAssignmentPage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import BudgetAssignmentForm from '../components/forms/BudgetAssignmentForm';
import BudgetAssignmentTable from '../components/tables/BudgetAssignmentTable';

const BudgetAssignmentPage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/budgetAssignments/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/budgetAssignments');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">BudgetAssignments</h2>
                <button
                  onClick={() => navigate('/budgetAssignments/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo BudgetAssignment
                </button>
              </div>
              <BudgetAssignmentTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/budgetAssignments')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <BudgetAssignmentForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/budgetAssignments')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <BudgetAssignmentForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default BudgetAssignmentPage;


==================================================
File: src/pages/BudgetItemPage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import BudgetItemForm from '../components/forms/BudgetItemForm';
import BudgetItemTable from '../components/tables/BudgetItemTable';

const BudgetItemPage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/budgetItems/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/budgetItems');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">BudgetItems</h2>
                <button
                  onClick={() => navigate('/budgetItems/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo BudgetItem
                </button>
              </div>
              <BudgetItemTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/budgetItems')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <BudgetItemForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/budgetItems')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <BudgetItemForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default BudgetItemPage;


==================================================
File: src/pages/BudgetMeasurementPage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import BudgetMeasurementForm from '../components/forms/BudgetMeasurementForm';
import BudgetMeasurementTable from '../components/tables/BudgetMeasurementTable';

const BudgetMeasurementPage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/budgetMeasurements/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/budgetMeasurements');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">BudgetMeasurements</h2>
                <button
                  onClick={() => navigate('/budgetMeasurements/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo BudgetMeasurement
                </button>
              </div>
              <BudgetMeasurementTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/budgetMeasurements')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <BudgetMeasurementForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/budgetMeasurements')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <BudgetMeasurementForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default BudgetMeasurementPage;


==================================================
File: src/pages/BudgetPage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import BudgetForm from '../components/forms/BudgetForm';
import BudgetTable from '../components/tables/BudgetTable';

const BudgetPage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/budgets/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/budgets');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">Budgets</h2>
                <button
                  onClick={() => navigate('/budgets/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo Budget
                </button>
              </div>
              <BudgetTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/budgets')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <BudgetForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/budgets')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <BudgetForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default BudgetPage;


==================================================
File: src/pages/BudgetSubtitlePage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import BudgetSubtitleForm from '../components/forms/BudgetSubtitleForm';
import BudgetSubtitleTable from '../components/tables/BudgetSubtitleTable';

const BudgetSubtitlePage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/budgetSubtitles/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/budgetSubtitles');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">BudgetSubtitles</h2>
                <button
                  onClick={() => navigate('/budgetSubtitles/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo BudgetSubtitle
                </button>
              </div>
              <BudgetSubtitleTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/budgetSubtitles')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <BudgetSubtitleForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/budgetSubtitles')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <BudgetSubtitleForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default BudgetSubtitlePage;


==================================================
File: src/pages/BudgetTitlePage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import BudgetTitleForm from '../components/forms/BudgetTitleForm';
import BudgetTitleTable from '../components/tables/BudgetTitleTable';

const BudgetTitlePage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/budgetTitles/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/budgetTitles');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">BudgetTitles</h2>
                <button
                  onClick={() => navigate('/budgetTitles/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo BudgetTitle
                </button>
              </div>
              <BudgetTitleTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/budgetTitles')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <BudgetTitleForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/budgetTitles')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <BudgetTitleForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default BudgetTitlePage;


==================================================
File: src/pages/ClientPage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import ClientForm from '../components/forms/ClientForm';
import ClientTable from '../components/tables/ClientTable';

const ClientPage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/clients/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/clients');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">Clients</h2>
                <button
                  onClick={() => navigate('/clients/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo Client
                </button>
              </div>
              <ClientTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/clients')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <ClientForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/clients')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <ClientForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default ClientPage;


==================================================
File: src/pages/ConfigurationPage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import ConfigurationForm from '../components/forms/ConfigurationForm';
import ConfigurationTable from '../components/tables/ConfigurationTable';

const ConfigurationPage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/configurations/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/configurations');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">Configurations</h2>
                <button
                  onClick={() => navigate('/configurations/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo Configuration
                </button>
              </div>
              <ConfigurationTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/configurations')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <ConfigurationForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/configurations')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <ConfigurationForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default ConfigurationPage;


==================================================
File: src/pages/GeneralExpensePage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import GeneralExpenseForm from '../components/forms/GeneralExpenseForm';
import GeneralExpenseTable from '../components/tables/GeneralExpenseTable';

const GeneralExpensePage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/generalExpenses/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/generalExpenses');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">GeneralExpenses</h2>
                <button
                  onClick={() => navigate('/generalExpenses/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo GeneralExpense
                </button>
              </div>
              <GeneralExpenseTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/generalExpenses')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <GeneralExpenseForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/generalExpenses')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <GeneralExpenseForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default GeneralExpensePage;


==================================================
File: src/pages/PriceCardPage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import PriceCardForm from '../components/forms/PriceCardForm';
import PriceCardTable from '../components/tables/PriceCardTable';

const PriceCardPage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/priceCards/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/priceCards');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">PriceCards</h2>
                <button
                  onClick={() => navigate('/priceCards/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo PriceCard
                </button>
              </div>
              <PriceCardTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/priceCards')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <PriceCardForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/priceCards')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <PriceCardForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default PriceCardPage;


==================================================
File: src/pages/ProjectPage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import ProjectForm from '../components/forms/ProjectForm';
import ProjectTable from '../components/tables/ProjectTable';

const ProjectPage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/projects/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/projects');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">Projects</h2>
                <button
                  onClick={() => navigate('/projects/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo Project
                </button>
              </div>
              <ProjectTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/projects')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <ProjectForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/projects')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <ProjectForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default ProjectPage;


==================================================
File: src/pages/ResourceFamilyPage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import ResourceFamilyForm from '../components/forms/ResourceFamilyForm';
import ResourceFamilyTable from '../components/tables/ResourceFamilyTable';

const ResourceFamilyPage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/resourceFamilys/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/resourceFamilys');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">ResourceFamilys</h2>
                <button
                  onClick={() => navigate('/resourceFamilys/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo ResourceFamily
                </button>
              </div>
              <ResourceFamilyTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/resourceFamilys')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <ResourceFamilyForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/resourceFamilys')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <ResourceFamilyForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default ResourceFamilyPage;


==================================================
File: src/pages/ResourcePage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import ResourceForm from '../components/forms/ResourceForm';
import ResourceTable from '../components/tables/ResourceTable';

const ResourcePage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/resources/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/resources');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">Resources</h2>
                <button
                  onClick={() => navigate('/resources/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo Resource
                </button>
              </div>
              <ResourceTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/resources')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <ResourceForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/resources')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <ResourceForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default ResourcePage;


==================================================
File: src/pages/UserPage.tsx
==================================================


import React, { useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import UserForm from '../components/forms/UserForm';
import UserTable from '../components/tables/UserTable';

const UserPage: React.FC = () => {
  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);
  const navigate = useNavigate();

  const handleEdit = (id: string) => {
    navigate(`/users/edit/${id}`);
  };

  const handleSuccess = () => {
    setRefreshTrigger(prev => prev + 1);
    navigate('/users');
  };

  return (
    <div>
      <Routes>
        <Route 
          path="/" 
          element={
            <>
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-2xl font-bold">Users</h2>
                <button
                  onClick={() => navigate('/users/new')}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
                >
                  Nuevo User
                </button>
              </div>
              <UserTable 
                key={refreshTrigger} 
                onEdit={handleEdit} 
                onDelete={() => setRefreshTrigger(prev => prev + 1)} 
              />
            </>
          } 
        />
        <Route 
          path="/new" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/users')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <UserForm onSuccess={handleSuccess} />
            </>
          } 
        />
        <Route 
          path="/edit/:id" 
          element={
            <>
              <div className="mb-4">
                <button
                  onClick={() => navigate('/users')}
                  className="text-indigo-600 hover:text-indigo-800"
                >
                  ← Volver a la lista
                </button>
              </div>
              <UserForm id={window.location.pathname.split('/').pop()} onSuccess={handleSuccess} />
            </>
          } 
        />
      </Routes>
    </div>
  );
};

export default UserPage;


==================================================
File: src/pages/index.ts
==================================================


import ClientPage from './ClientPage';
import ProjectPage from './ProjectPage';
import BudgetPage from './BudgetPage';
import BudgetTitlePage from './BudgetTitlePage';
import BudgetSubtitlePage from './BudgetSubtitlePage';
import BudgetItemPage from './BudgetItemPage';
import BudgetMeasurementPage from './BudgetMeasurementPage';
import ResourceFamilyPage from './ResourceFamilyPage';
import ResourcePage from './ResourcePage';
import PriceCardPage from './PriceCardPage';
import UserPage from './UserPage';
import BudgetAssignmentPage from './BudgetAssignmentPage';
import GeneralExpensePage from './GeneralExpensePage';
import ConfigurationPage from './ConfigurationPage';

export {
  ClientPage,
  ProjectPage,
  BudgetPage,
  BudgetTitlePage,
  BudgetSubtitlePage,
  BudgetItemPage,
  BudgetMeasurementPage,
  ResourceFamilyPage,
  ResourcePage,
  PriceCardPage,
  UserPage,
  BudgetAssignmentPage,
  GeneralExpensePage,
  ConfigurationPage
};


==================================================
File: src/services/apiClient.ts
==================================================


import axios from 'axios';

// Configuración base para axios
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001/api';

const apiClient = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Interceptor para manejar errores globalmente
apiClient.interceptors.response.use(
  (response) => response,
  (error) => {
    console.error('API Error:', error.response?.data || error.message);
    return Promise.reject(error);
  }
);

export default apiClient;


==================================================
File: src/services/budget.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface Budget {
  budget_id: number;
  projectId: number;
  code: string;
  obraName: string;
  owner: string;
  baseDate: Date;
  status: any;
  responsibleUserId: number;
  createdAt: Date;
  updatedAt: Date;
  project: any;
  responsibleUser: any;
  titles: any;
  items: any;
  assignments: any;
  generalExpenses: any;
}

export type BudgetInput = Omit<Budget, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/budgets';

// Servicio para Budget
export const BudgetService = {
  // Obtener todos los registros
  getAll: async (): Promise<Budget[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<Budget> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: BudgetInput): Promise<Budget> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<BudgetInput>): Promise<Budget> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: src/services/budgetAssignment.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface BudgetAssignment {
  assignment_id: number;
  budgetId: number;
  userId: number;
  roleInBudget: string;
  createdAt: Date;
  updatedAt: Date;
  budget: any;
  user: any;
}

export type BudgetAssignmentInput = Omit<BudgetAssignment, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/budgetAssignments';

// Servicio para BudgetAssignment
export const BudgetAssignmentService = {
  // Obtener todos los registros
  getAll: async (): Promise<BudgetAssignment[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<BudgetAssignment> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: BudgetAssignmentInput): Promise<BudgetAssignment> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<BudgetAssignmentInput>): Promise<BudgetAssignment> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: src/services/budgetItem.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface BudgetItem {
  item_id: number;
  budgetId: number;
  titleId: number;
  subtitleId: number;
  code: string;
  description: string;
  quantity: any;
  unit: string;
  unitPrice: any;
  metradoTotal: any;
  formula: string;
  materialsCost: any;
  laborCost: any;
  equipmentCost: any;
  incidencePercentage: any;
  createdAt: Date;
  updatedAt: Date;
  budget: any;
  title: any;
  subtitle: any;
  measurements: any;
}

export type BudgetItemInput = Omit<BudgetItem, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/budgetItems';

// Servicio para BudgetItem
export const BudgetItemService = {
  // Obtener todos los registros
  getAll: async (): Promise<BudgetItem[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<BudgetItem> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: BudgetItemInput): Promise<BudgetItem> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<BudgetItemInput>): Promise<BudgetItem> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: src/services/budgetMeasurement.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface BudgetMeasurement {
  measurement_id: number;
  itemId: number;
  productionUnit: string;
  quantity: any;
  metradoValue: any;
  createdAt: Date;
  updatedAt: Date;
  item: any;
}

export type BudgetMeasurementInput = Omit<BudgetMeasurement, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/budgetMeasurements';

// Servicio para BudgetMeasurement
export const BudgetMeasurementService = {
  // Obtener todos los registros
  getAll: async (): Promise<BudgetMeasurement[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<BudgetMeasurement> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: BudgetMeasurementInput): Promise<BudgetMeasurement> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<BudgetMeasurementInput>): Promise<BudgetMeasurement> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: src/services/budgetSubtitle.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface BudgetSubtitle {
  subtitle_id: number;
  titleId: number;
  name: string;
  orderIndex: number;
  createdAt: Date;
  updatedAt: Date;
  title: any;
  items: any;
}

export type BudgetSubtitleInput = Omit<BudgetSubtitle, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/budgetSubtitles';

// Servicio para BudgetSubtitle
export const BudgetSubtitleService = {
  // Obtener todos los registros
  getAll: async (): Promise<BudgetSubtitle[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<BudgetSubtitle> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: BudgetSubtitleInput): Promise<BudgetSubtitle> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<BudgetSubtitleInput>): Promise<BudgetSubtitle> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: src/services/budgetTitle.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface BudgetTitle {
  title_id: number;
  budgetId: number;
  name: string;
  orderIndex: number;
  createdAt: Date;
  updatedAt: Date;
  budget: any;
  subtitles: any;
  items: any;
}

export type BudgetTitleInput = Omit<BudgetTitle, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/budgetTitles';

// Servicio para BudgetTitle
export const BudgetTitleService = {
  // Obtener todos los registros
  getAll: async (): Promise<BudgetTitle[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<BudgetTitle> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: BudgetTitleInput): Promise<BudgetTitle> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<BudgetTitleInput>): Promise<BudgetTitle> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: src/services/client.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface Client {
  client_id: number;
  name: string;
  logoUrl: string;
  colorScheme: string;
  createdAt: Date;
  updatedAt: Date;
  projects: any;
  users: any;
  configurations: any;
}

export type ClientInput = Omit<Client, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/clients';

// Servicio para Client
export const ClientService = {
  // Obtener todos los registros
  getAll: async (): Promise<Client[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<Client> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: ClientInput): Promise<Client> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<ClientInput>): Promise<Client> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: src/services/configuration.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface Configuration {
  configuration_id: number;
  clientId: number;
  settingKey: string;
  settingValue: string;
  createdAt: Date;
  updatedAt: Date;
  client: any;
}

export type ConfigurationInput = Omit<Configuration, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/configurations';

// Servicio para Configuration
export const ConfigurationService = {
  // Obtener todos los registros
  getAll: async (): Promise<Configuration[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<Configuration> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: ConfigurationInput): Promise<Configuration> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<ConfigurationInput>): Promise<Configuration> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: src/services/generalExpense.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface GeneralExpense {
  expense_id: number;
  budgetId: number;
  description: string;
  percentage: any;
  amount: any;
  createdAt: Date;
  updatedAt: Date;
  budget: any;
}

export type GeneralExpenseInput = Omit<GeneralExpense, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/generalExpenses';

// Servicio para GeneralExpense
export const GeneralExpenseService = {
  // Obtener todos los registros
  getAll: async (): Promise<GeneralExpense[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<GeneralExpense> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: GeneralExpenseInput): Promise<GeneralExpense> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<GeneralExpenseInput>): Promise<GeneralExpense> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: src/services/priceCard.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface PriceCard {
  price_card_id: number;
  resourceId: number;
  provider: string;
  price: any;
  contractType: any;
  effectiveDate: Date;
  createdAt: Date;
  updatedAt: Date;
  resource: any;
}

export type PriceCardInput = Omit<PriceCard, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/priceCards';

// Servicio para PriceCard
export const PriceCardService = {
  // Obtener todos los registros
  getAll: async (): Promise<PriceCard[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<PriceCard> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: PriceCardInput): Promise<PriceCard> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<PriceCardInput>): Promise<PriceCard> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: src/services/project.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface Project {
  project_id: number;
  clientId: number;
  name: string;
  description: string;
  location: string;
  startDate: Date;
  endDate: Date;
  createdAt: Date;
  updatedAt: Date;
  client: any;
  budgets: any;
}

export type ProjectInput = Omit<Project, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/projects';

// Servicio para Project
export const ProjectService = {
  // Obtener todos los registros
  getAll: async (): Promise<Project[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<Project> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: ProjectInput): Promise<Project> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<ProjectInput>): Promise<Project> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: src/services/resource.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface Resource {
  resource_id: number;
  familyId: number;
  name: string;
  description: string;
  createdAt: Date;
  updatedAt: Date;
  family: any;
  priceCards: any;
}

export type ResourceInput = Omit<Resource, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/resources';

// Servicio para Resource
export const ResourceService = {
  // Obtener todos los registros
  getAll: async (): Promise<Resource[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<Resource> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: ResourceInput): Promise<Resource> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<ResourceInput>): Promise<Resource> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: src/services/resourceFamily.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface ResourceFamily {
  family_id: number;
  name: string;
  description: string;
  createdAt: Date;
  updatedAt: Date;
  resources: any;
}

export type ResourceFamilyInput = Omit<ResourceFamily, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/resourceFamilys';

// Servicio para ResourceFamily
export const ResourceFamilyService = {
  // Obtener todos los registros
  getAll: async (): Promise<ResourceFamily[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<ResourceFamily> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: ResourceFamilyInput): Promise<ResourceFamily> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<ResourceFamilyInput>): Promise<ResourceFamily> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: src/services/user.service.ts
==================================================


import apiClient from './apiClient';

// Tipos
export interface User {
  user_id: number;
  clientId: number;
  name: string;
  email: string;
  passwordHash: string;
  role: any;
  createdAt: Date;
  updatedAt: Date;
  client: any;
  budgets: any;
  assignments: any;
}

export type UserInput = Omit<User, 'id' | 'createdAt' | 'updatedAt'>;

// Endpoints
const API_ENDPOINT = '/users';

// Servicio para User
export const UserService = {
  // Obtener todos los registros
  getAll: async (): Promise<User[]> => {
    const response = await apiClient.get(API_ENDPOINT);
    return response.data;
  },

  // Obtener un registro por ID
  getById: async (id: string): Promise<User> => {
    const response = await apiClient.get(`${API_ENDPOINT}/${id}`);
    return response.data;
  },

  // Crear un nuevo registro
  create: async (data: UserInput): Promise<User> => {
    const response = await apiClient.post(API_ENDPOINT, data);
    return response.data;
  },

  // Actualizar un registro
  update: async (id: string, data: Partial<UserInput>): Promise<User> => {
    const response = await apiClient.put(`${API_ENDPOINT}/${id}`, data);
    return response.data;
  },

  // Eliminar un registro
  delete: async (id: string): Promise<void> => {
    await apiClient.delete(`${API_ENDPOINT}/${id}`);
  },
};


==================================================
File: src/vite-env.d.ts
==================================================

/// <reference types="vite/client" />


==================================================
File: tailwind.config.js
==================================================

/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eef2ff',
          100: '#e0e7ff',
          200: '#c7d2fe',
          300: '#a5b4fc',
          400: '#818cf8',
          500: '#6366f1',
          600: '#4f46e5',
          700: '#4338ca',
          800: '#3730a3',
          900: '#312e81',
          950: '#1e1b4b',
        },
        secondary: {
          50: '#f8fafc',
          100: '#f1f5f9',
          200: '#e2e8f0',
          300: '#cbd5e1',
          400: '#94a3b8',
          500: '#64748b',
          600: '#475569',
          700: '#334155',
          800: '#1e293b',
          900: '#0f172a',
          950: '#020617',
        },
        accent: {
          50: '#f0fdfa',
          100: '#ccfbf1',
          200: '#99f6e4',
          300: '#5eead4',
          400: '#2dd4bf',
          500: '#14b8a6',
          600: '#0d9488',
          700: '#0f766e',
          800: '#115e59',
          900: '#134e4a',
          950: '#042f2e',
        },
      },
      fontFamily: {
        sans: ['Inter', 'sans-serif'],
        heading: ['Montserrat', 'sans-serif'],
      },
      boxShadow: {
        card: '0 0 0 1px rgba(0, 0, 0, 0.05), 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)',
        'card-hover': '0 0 0 1px rgba(0, 0, 0, 0.05), 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
      },
      borderRadius: {
        'xl': '1rem',
        '2xl': '1.5rem',
      },
    },
  },
  plugins: [
    require('@tailwindcss/forms')
  ],
}

==================================================
File: tsconfig.app.json
==================================================

{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}


==================================================
File: tsconfig.json
==================================================

{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}


==================================================
File: tsconfig.node.json
==================================================

{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}


==================================================
File: vite.config.ts
==================================================

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import tailwindcss from "@tailwindcss/vite";

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    react(),
    tailwindcss(),


  ],
  optimizeDeps: {
    exclude: ['lucide-react'],
  },
});